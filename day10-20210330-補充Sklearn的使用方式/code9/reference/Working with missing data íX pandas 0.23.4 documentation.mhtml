From: <Saved by Blink>
Snapshot-Content-Location: https://pandas.pydata.org/pandas-docs/stable/missing_data.html
Subject: =?utf-8?Q?Working=20with=20missing=20data=20=E2=80=94=20pandas=200.23.4?=
 =?utf-8?Q?=20documentation?=
Date: Wed, 26 Sep 2018 05:24:06 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--VC2uzp7J5kSRAjTqs1aUWpOToD3r76QsQkbPabR4Dc----"


------MultipartBoundary--VC2uzp7J5kSRAjTqs1aUWpOToD3r76QsQkbPabR4Dc----
Content-Type: text/html
Content-ID: <frame-79E3B0EE81BA55B133AFAAC3B43C9D74@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://pandas.pydata.org/pandas-docs/stable/missing_data.html

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.=
w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns=3D"http://www.w3.=
org/1999/xhtml"><head><meta http-equiv=3D"Content-Type" content=3D"text/htm=
l; charset=3DUTF-8">
    <meta http-equiv=3D"X-UA-Compatible" content=3D"IE=3DEdge">
   =20
    <title>Working with missing data =E2=80=94 pandas 0.23.4 documentation<=
/title>
    <link rel=3D"stylesheet" href=3D"https://pandas.pydata.org/pandas-docs/=
stable/_static/nature.css" type=3D"text/css">
    <link rel=3D"stylesheet" href=3D"https://pandas.pydata.org/pandas-docs/=
stable/_static/pygments.css" type=3D"text/css">
   =20
   =20
   =20
   =20
   =20
    <link rel=3D"index" title=3D"Index" href=3D"https://pandas.pydata.org/p=
andas-docs/stable/genindex.html">
    <link rel=3D"search" title=3D"Search" href=3D"https://pandas.pydata.org=
/pandas-docs/stable/search.html">
    <link rel=3D"next" title=3D"Group By: split-apply-combine" href=3D"http=
s://pandas.pydata.org/pandas-docs/stable/groupby.html">
    <link rel=3D"prev" title=3D"Computational tools" href=3D"https://pandas=
.pydata.org/pandas-docs/stable/computation.html">=20
  <style type=3D"text/css">.MathJax_Hover_Frame {border-radius: .25em; -web=
kit-border-radius: .25em; -moz-border-radius: .25em; -khtml-border-radius: =
.25em; box-shadow: 0px 0px 15px #83A; -webkit-box-shadow: 0px 0px 15px #83A=
; -moz-box-shadow: 0px 0px 15px #83A; -khtml-box-shadow: 0px 0px 15px #83A;=
 border: 1px solid #A6D ! important; display: inline-block; position: absol=
ute}
.MathJax_Menu_Button .MathJax_Hover_Arrow {position: absolute; cursor: poin=
ter; display: inline-block; border: 2px solid #AAA; border-radius: 4px; -we=
bkit-border-radius: 4px; -moz-border-radius: 4px; -khtml-border-radius: 4px=
; font-family: 'Courier New',Courier; font-size: 9px; color: #F0F0F0}
.MathJax_Menu_Button .MathJax_Hover_Arrow span {display: block; background-=
color: #AAA; border: 1px solid; border-radius: 3px; line-height: 0; padding=
: 4px}
.MathJax_Hover_Arrow:hover {color: white!important; border: 2px solid #CCC!=
important}
.MathJax_Hover_Arrow:hover span {background-color: #CCC!important}
</style><style type=3D"text/css">#MathJax_About {position: fixed; left: 50%=
; width: auto; text-align: center; border: 3px outset; padding: 1em 2em; ba=
ckground-color: #DDDDDD; color: black; cursor: default; font-family: messag=
e-box; font-size: 120%; font-style: normal; text-indent: 0; text-transform:=
 none; line-height: normal; letter-spacing: normal; word-spacing: normal; w=
ord-wrap: normal; white-space: nowrap; float: none; z-index: 201; border-ra=
dius: 15px; -webkit-border-radius: 15px; -moz-border-radius: 15px; -khtml-b=
order-radius: 15px; box-shadow: 0px 10px 20px #808080; -webkit-box-shadow: =
0px 10px 20px #808080; -moz-box-shadow: 0px 10px 20px #808080; -khtml-box-s=
hadow: 0px 10px 20px #808080; filter: progid:DXImageTransform.Microsoft.dro=
pshadow(OffX=3D2, OffY=3D2, Color=3D'gray', Positive=3D'true')}
#MathJax_About.MathJax_MousePost {outline: none}
.MathJax_Menu {position: absolute; background-color: white; color: black; w=
idth: auto; padding: 2px; border: 1px solid #CCCCCC; margin: 0; cursor: def=
ault; font: menu; text-align: left; text-indent: 0; text-transform: none; l=
ine-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap=
: normal; white-space: nowrap; float: none; z-index: 201; box-shadow: 0px 1=
0px 20px #808080; -webkit-box-shadow: 0px 10px 20px #808080; -moz-box-shado=
w: 0px 10px 20px #808080; -khtml-box-shadow: 0px 10px 20px #808080; filter:=
 progid:DXImageTransform.Microsoft.dropshadow(OffX=3D2, OffY=3D2, Color=3D'=
gray', Positive=3D'true')}
.MathJax_MenuItem {padding: 2px 2em; background: transparent}
.MathJax_MenuArrow {position: absolute; right: .5em; padding-top: .25em; co=
lor: #666666; font-size: .75em}
.MathJax_MenuActive .MathJax_MenuArrow {color: white}
.MathJax_MenuArrow.RTL {left: .5em; right: auto}
.MathJax_MenuCheck {position: absolute; left: .7em}
.MathJax_MenuCheck.RTL {right: .7em; left: auto}
.MathJax_MenuRadioCheck {position: absolute; left: 1em}
.MathJax_MenuRadioCheck.RTL {right: 1em; left: auto}
.MathJax_MenuLabel {padding: 2px 2em 4px 1.33em; font-style: italic}
.MathJax_MenuRule {border-top: 1px solid #CCCCCC; margin: 4px 1px 0px}
.MathJax_MenuDisabled {color: GrayText}
.MathJax_MenuActive {background-color: Highlight; color: HighlightText}
.MathJax_MenuDisabled:focus, .MathJax_MenuLabel:focus {background-color: #E=
8E8E8}
.MathJax_ContextMenu:focus {outline: none}
.MathJax_ContextMenu .MathJax_MenuItem:focus {outline: none}
#MathJax_AboutClose {top: .2em; right: .2em}
.MathJax_Menu .MathJax_MenuClose {top: -10px; left: -10px}
.MathJax_MenuClose {position: absolute; cursor: pointer; display: inline-bl=
ock; border: 2px solid #AAA; border-radius: 18px; -webkit-border-radius: 18=
px; -moz-border-radius: 18px; -khtml-border-radius: 18px; font-family: 'Cou=
rier New',Courier; font-size: 24px; color: #F0F0F0}
.MathJax_MenuClose span {display: block; background-color: #AAA; border: 1.=
5px solid; border-radius: 18px; -webkit-border-radius: 18px; -moz-border-ra=
dius: 18px; -khtml-border-radius: 18px; line-height: 0; padding: 8px 0 6px}
.MathJax_MenuClose:hover {color: white!important; border: 2px solid #CCC!im=
portant}
.MathJax_MenuClose:hover span {background-color: #CCC!important}
.MathJax_MenuClose:hover:focus {outline: none}
</style><style type=3D"text/css">.MathJax_Preview .MJXf-math {color: inheri=
t!important}
</style><style type=3D"text/css">.MJX_Assistive_MathML {position: absolute!=
important; top: 0; left: 0; clip: rect(1px, 1px, 1px, 1px); padding: 1px 0 =
0 0!important; border: 0!important; height: 1px!important; width: 1px!impor=
tant; overflow: hidden!important; display: block!important; -webkit-touch-c=
allout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-use=
r-select: none; -ms-user-select: none; user-select: none}
.MJX_Assistive_MathML.MJX_Assistive_MathML_Block {width: 100%!important}
</style><style type=3D"text/css">#MathJax_Zoom {position: absolute; backgro=
und-color: #F0F0F0; overflow: auto; display: block; z-index: 301; padding: =
.5em; border: 1px solid black; margin: 0; font-weight: normal; font-style: =
normal; text-align: left; text-indent: 0; text-transform: none; line-height=
: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; =
white-space: nowrap; float: none; -webkit-box-sizing: content-box; -moz-box=
-sizing: content-box; box-sizing: content-box; box-shadow: 5px 5px 15px #AA=
AAAA; -webkit-box-shadow: 5px 5px 15px #AAAAAA; -moz-box-shadow: 5px 5px 15=
px #AAAAAA; -khtml-box-shadow: 5px 5px 15px #AAAAAA; filter: progid:DXImage=
Transform.Microsoft.dropshadow(OffX=3D2, OffY=3D2, Color=3D'gray', Positive=
=3D'true')}
#MathJax_ZoomOverlay {position: absolute; left: 0; top: 0; z-index: 300; di=
splay: inline-block; width: 100%; height: 100%; border: 0; padding: 0; marg=
in: 0; background-color: white; opacity: 0; filter: alpha(opacity=3D0)}
#MathJax_ZoomFrame {position: relative; display: inline-block; height: 0; w=
idth: 0}
#MathJax_ZoomEventTrap {position: absolute; left: 0; top: 0; z-index: 302; =
display: inline-block; border: 0; padding: 0; margin: 0; background-color: =
white; opacity: 0; filter: alpha(opacity=3D0)}
</style><style type=3D"text/css">.MathJax_Preview {color: #888}
#MathJax_Message {position: fixed; left: 1em; bottom: 1.5em; background-col=
or: #E6E6E6; border: 1px solid #959595; margin: 0px; padding: 2px 8px; z-in=
dex: 102; color: black; font-size: 80%; width: auto; white-space: nowrap}
#MathJax_MSIE_Frame {position: absolute; top: 0; left: 0; width: 0px; z-ind=
ex: 101; border: 0px; margin: 0px; padding: 0px}
.MathJax_Error {color: #CC0000; font-style: italic}
</style><style type=3D"text/css">.MJXp-script {font-size: .8em}
.MJXp-right {-webkit-transform-origin: right; -moz-transform-origin: right;=
 -ms-transform-origin: right; -o-transform-origin: right; transform-origin:=
 right}
.MJXp-bold {font-weight: bold}
.MJXp-italic {font-style: italic}
.MJXp-scr {font-family: MathJax_Script,'Times New Roman',Times,STIXGeneral,=
serif}
.MJXp-frak {font-family: MathJax_Fraktur,'Times New Roman',Times,STIXGenera=
l,serif}
.MJXp-sf {font-family: MathJax_SansSerif,'Times New Roman',Times,STIXGenera=
l,serif}
.MJXp-cal {font-family: MathJax_Caligraphic,'Times New Roman',Times,STIXGen=
eral,serif}
.MJXp-mono {font-family: MathJax_Typewriter,'Times New Roman',Times,STIXGen=
eral,serif}
.MJXp-largeop {font-size: 150%}
.MJXp-largeop.MJXp-int {vertical-align: -.2em}
.MJXp-math {display: inline-block; line-height: 1.2; text-indent: 0; font-f=
amily: 'Times New Roman',Times,STIXGeneral,serif; white-space: nowrap; bord=
er-collapse: collapse}
.MJXp-display {display: block; text-align: center; margin: 1em 0}
.MJXp-math span {display: inline-block}
.MJXp-box {display: block!important; text-align: center}
.MJXp-box:after {content: " "}
.MJXp-rule {display: block!important; margin-top: .1em}
.MJXp-char {display: block!important}
.MJXp-mo {margin: 0 .15em}
.MJXp-mfrac {margin: 0 .125em; vertical-align: .25em}
.MJXp-denom {display: inline-table!important; width: 100%}
.MJXp-denom > * {display: table-row!important}
.MJXp-surd {vertical-align: top}
.MJXp-surd > * {display: block!important}
.MJXp-script-box > *  {display: table!important; height: 50%}
.MJXp-script-box > * > * {display: table-cell!important; vertical-align: to=
p}
.MJXp-script-box > *:last-child > * {vertical-align: bottom}
.MJXp-script-box > * > * > * {display: block!important}
.MJXp-mphantom {visibility: hidden}
.MJXp-munderover {display: inline-table!important}
.MJXp-over {display: inline-block!important; text-align: center}
.MJXp-over > * {display: block!important}
.MJXp-munderover > * {display: table-row!important}
.MJXp-mtable {vertical-align: .25em; margin: 0 .125em}
.MJXp-mtable > * {display: inline-table!important; vertical-align: middle}
.MJXp-mtr {display: table-row!important}
.MJXp-mtd {display: table-cell!important; text-align: center; padding: .5em=
 0 0 .5em}
.MJXp-mtr > .MJXp-mtd:first-child {padding-left: 0}
.MJXp-mtr:first-child > .MJXp-mtd {padding-top: 0}
.MJXp-mlabeledtr {display: table-row!important}
.MJXp-mlabeledtr > .MJXp-mtd:first-child {padding-left: 0}
.MJXp-mlabeledtr:first-child > .MJXp-mtd {padding-top: 0}
.MJXp-merror {background-color: #FFFF88; color: #CC0000; border: 1px solid =
#CC0000; padding: 1px 3px; font-style: normal; font-size: 90%}
.MJXp-scale0 {-webkit-transform: scaleX(.0); -moz-transform: scaleX(.0); -m=
s-transform: scaleX(.0); -o-transform: scaleX(.0); transform: scaleX(.0)}
.MJXp-scale1 {-webkit-transform: scaleX(.1); -moz-transform: scaleX(.1); -m=
s-transform: scaleX(.1); -o-transform: scaleX(.1); transform: scaleX(.1)}
.MJXp-scale2 {-webkit-transform: scaleX(.2); -moz-transform: scaleX(.2); -m=
s-transform: scaleX(.2); -o-transform: scaleX(.2); transform: scaleX(.2)}
.MJXp-scale3 {-webkit-transform: scaleX(.3); -moz-transform: scaleX(.3); -m=
s-transform: scaleX(.3); -o-transform: scaleX(.3); transform: scaleX(.3)}
.MJXp-scale4 {-webkit-transform: scaleX(.4); -moz-transform: scaleX(.4); -m=
s-transform: scaleX(.4); -o-transform: scaleX(.4); transform: scaleX(.4)}
.MJXp-scale5 {-webkit-transform: scaleX(.5); -moz-transform: scaleX(.5); -m=
s-transform: scaleX(.5); -o-transform: scaleX(.5); transform: scaleX(.5)}
.MJXp-scale6 {-webkit-transform: scaleX(.6); -moz-transform: scaleX(.6); -m=
s-transform: scaleX(.6); -o-transform: scaleX(.6); transform: scaleX(.6)}
.MJXp-scale7 {-webkit-transform: scaleX(.7); -moz-transform: scaleX(.7); -m=
s-transform: scaleX(.7); -o-transform: scaleX(.7); transform: scaleX(.7)}
.MJXp-scale8 {-webkit-transform: scaleX(.8); -moz-transform: scaleX(.8); -m=
s-transform: scaleX(.8); -o-transform: scaleX(.8); transform: scaleX(.8)}
.MJXp-scale9 {-webkit-transform: scaleX(.9); -moz-transform: scaleX(.9); -m=
s-transform: scaleX(.9); -o-transform: scaleX(.9); transform: scaleX(.9)}
.MathJax_PHTML .noError {vertical-align: ; font-size: 90%; text-align: left=
; color: black; padding: 1px 3px; border: 1px solid}
</style></head><body><div id=3D"MathJax_Message" style=3D"display: none;"><=
/div>
    <div class=3D"related" role=3D"navigation" aria-label=3D"related naviga=
tion">
      <h3>Navigation</h3>
      <ul>
        <li class=3D"right" style=3D"margin-right: 10px">
          <a href=3D"https://pandas.pydata.org/pandas-docs/stable/genindex.=
html" title=3D"General Index" accesskey=3D"I">index</a></li>
        <li class=3D"right">
          <a href=3D"https://pandas.pydata.org/pandas-docs/stable/py-modind=
ex.html" title=3D"Python Module Index">modules</a> |</li>
        <li class=3D"right">
          <a href=3D"https://pandas.pydata.org/pandas-docs/stable/groupby.h=
tml" title=3D"Group By: split-apply-combine" accesskey=3D"N">next</a> |</li=
>
        <li class=3D"right">
          <a href=3D"https://pandas.pydata.org/pandas-docs/stable/computati=
on.html" title=3D"Computational tools" accesskey=3D"P">previous</a> |</li>
        <li class=3D"nav-item nav-item-0"><a href=3D"https://pandas.pydata.=
org/pandas-docs/stable/index.html">pandas 0.23.4 documentation</a> =C2=BB</=
li>=20
      </ul>
    </div>
<div class=3D"content-wrapper">
    <div class=3D"content">
        <div class=3D"document">
            <div class=3D"sphinxsidebar">
                <h3>Table Of Contents</h3>
                <ul class=3D"current">
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://pa=
ndas.pydata.org/pandas-docs/stable/whatsnew.html">What=E2=80=99s New</a></l=
i>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://pa=
ndas.pydata.org/pandas-docs/stable/install.html">Installation</a></li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://pa=
ndas.pydata.org/pandas-docs/stable/contributing.html">Contributing to panda=
s</a></li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://pa=
ndas.pydata.org/pandas-docs/stable/overview.html">Package overview</a></li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://pa=
ndas.pydata.org/pandas-docs/stable/10min.html">10 Minutes to pandas</a></li=
>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://pa=
ndas.pydata.org/pandas-docs/stable/tutorials.html">Tutorials</a></li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://pa=
ndas.pydata.org/pandas-docs/stable/cookbook.html">Cookbook</a></li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://pa=
ndas.pydata.org/pandas-docs/stable/dsintro.html">Intro to Data Structures</=
a></li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://pa=
ndas.pydata.org/pandas-docs/stable/basics.html">Essential Basic Functionali=
ty</a></li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://pa=
ndas.pydata.org/pandas-docs/stable/text.html">Working with Text Data</a></l=
i>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://pa=
ndas.pydata.org/pandas-docs/stable/options.html">Options and Settings</a></=
li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://pa=
ndas.pydata.org/pandas-docs/stable/indexing.html">Indexing and Selecting Da=
ta</a></li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://pa=
ndas.pydata.org/pandas-docs/stable/advanced.html">MultiIndex / Advanced Ind=
exing</a></li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://pa=
ndas.pydata.org/pandas-docs/stable/computation.html">Computational tools</a=
></li>
<li class=3D"toctree-l1 current"><a class=3D"current reference internal" hr=
ef=3D"https://pandas.pydata.org/pandas-docs/stable/missing_data.html#">Work=
ing with missing data</a><ul>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://pa=
ndas.pydata.org/pandas-docs/stable/missing_data.html#missing-data-basics">M=
issing data basics</a><ul>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://pa=
ndas.pydata.org/pandas-docs/stable/missing_data.html#when-why-does-data-bec=
ome-missing">When / why does data become missing?</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://pa=
ndas.pydata.org/pandas-docs/stable/missing_data.html#values-considered-miss=
ing">Values considered =E2=80=9Cmissing=E2=80=9D</a></li>
</ul>
</li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://pa=
ndas.pydata.org/pandas-docs/stable/missing_data.html#datetimes">Datetimes</=
a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://pa=
ndas.pydata.org/pandas-docs/stable/missing_data.html#inserting-missing-data=
">Inserting missing data</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://pa=
ndas.pydata.org/pandas-docs/stable/missing_data.html#calculations-with-miss=
ing-data">Calculations with missing data</a><ul>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://pa=
ndas.pydata.org/pandas-docs/stable/missing_data.html#sum-prod-of-empties-na=
ns">Sum/Prod of Empties/Nans</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://pa=
ndas.pydata.org/pandas-docs/stable/missing_data.html#na-values-in-groupby">=
NA values in GroupBy</a></li>
</ul>
</li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://pa=
ndas.pydata.org/pandas-docs/stable/missing_data.html#cleaning-filling-missi=
ng-data">Cleaning / filling missing data</a><ul>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://pa=
ndas.pydata.org/pandas-docs/stable/missing_data.html#filling-missing-values=
-fillna">Filling missing values: fillna</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://pa=
ndas.pydata.org/pandas-docs/stable/missing_data.html#filling-with-a-pandaso=
bject">Filling with a PandasObject</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://pa=
ndas.pydata.org/pandas-docs/stable/missing_data.html#dropping-axis-labels-w=
ith-missing-data-dropna">Dropping axis labels with missing data: dropna</a>=
</li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://pa=
ndas.pydata.org/pandas-docs/stable/missing_data.html#interpolation">Interpo=
lation</a><ul>
<li class=3D"toctree-l4"><a class=3D"reference internal" href=3D"https://pa=
ndas.pydata.org/pandas-docs/stable/missing_data.html#interpolation-limits">=
Interpolation Limits</a></li>
</ul>
</li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://pa=
ndas.pydata.org/pandas-docs/stable/missing_data.html#replacing-generic-valu=
es">Replacing Generic Values</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://pa=
ndas.pydata.org/pandas-docs/stable/missing_data.html#string-regular-express=
ion-replacement">String/Regular Expression Replacement</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://pa=
ndas.pydata.org/pandas-docs/stable/missing_data.html#numeric-replacement">N=
umeric Replacement</a></li>
</ul>
</li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://pa=
ndas.pydata.org/pandas-docs/stable/missing_data.html#missing-data-casting-r=
ules-and-indexing">Missing data casting rules and indexing</a></li>
</ul>
</li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://pa=
ndas.pydata.org/pandas-docs/stable/groupby.html">Group By: split-apply-comb=
ine</a></li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://pa=
ndas.pydata.org/pandas-docs/stable/merging.html">Merge, join, and concatena=
te</a></li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://pa=
ndas.pydata.org/pandas-docs/stable/reshaping.html">Reshaping and Pivot Tabl=
es</a></li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://pa=
ndas.pydata.org/pandas-docs/stable/timeseries.html">Time Series / Date func=
tionality</a></li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://pa=
ndas.pydata.org/pandas-docs/stable/timedeltas.html">Time Deltas</a></li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://pa=
ndas.pydata.org/pandas-docs/stable/categorical.html">Categorical Data</a></=
li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://pa=
ndas.pydata.org/pandas-docs/stable/visualization.html">Visualization</a></l=
i>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://pa=
ndas.pydata.org/pandas-docs/stable/style.html">Styling</a></li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://pa=
ndas.pydata.org/pandas-docs/stable/io.html">IO Tools (Text, CSV, HDF5, =E2=
=80=A6)</a></li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://pa=
ndas.pydata.org/pandas-docs/stable/enhancingperf.html">Enhancing Performanc=
e</a></li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://pa=
ndas.pydata.org/pandas-docs/stable/sparse.html">Sparse data structures</a><=
/li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://pa=
ndas.pydata.org/pandas-docs/stable/gotchas.html">Frequently Asked Questions=
 (FAQ)</a></li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://pa=
ndas.pydata.org/pandas-docs/stable/r_interface.html">rpy2 / R interface</a>=
</li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://pa=
ndas.pydata.org/pandas-docs/stable/ecosystem.html">pandas Ecosystem</a></li=
>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://pa=
ndas.pydata.org/pandas-docs/stable/comparison_with_r.html">Comparison with =
R / R libraries</a></li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://pa=
ndas.pydata.org/pandas-docs/stable/comparison_with_sql.html">Comparison wit=
h SQL</a></li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://pa=
ndas.pydata.org/pandas-docs/stable/comparison_with_sas.html">Comparison wit=
h SAS</a></li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://pa=
ndas.pydata.org/pandas-docs/stable/comparison_with_stata.html">Comparison w=
ith Stata</a></li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://pa=
ndas.pydata.org/pandas-docs/stable/api.html">API Reference</a></li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://pa=
ndas.pydata.org/pandas-docs/stable/developer.html">Developer</a></li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://pa=
ndas.pydata.org/pandas-docs/stable/internals.html">Internals</a></li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://pa=
ndas.pydata.org/pandas-docs/stable/extending.html">Extending Pandas</a></li=
>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://pa=
ndas.pydata.org/pandas-docs/stable/release.html">Release Notes</a></li>
</ul>

                <h3 style=3D"margin-top: 1.5em;">Search</h3>

                <form class=3D"search" action=3D"https://pandas.pydata.org/=
pandas-docs/stable/search.html" method=3D"get">
                    <input type=3D"text" name=3D"q" size=3D"18">
                    <input type=3D"submit" value=3D"Go">
                   =20
                   =20
                </form>
                <p class=3D"searchtip" style=3D"font-size: 90%">
                    Enter search terms or a module, class or function name.
                </p>

            </div>
            =20
            <div class=3D"documentwrapper">
                <div class=3D"bodywrapper">
                    <div class=3D"body">
                       =20
  <div class=3D"section" id=3D"working-with-missing-data">
<span id=3D"missing-data"></span><h1>Working with missing data<a class=3D"h=
eaderlink" href=3D"https://pandas.pydata.org/pandas-docs/stable/missing_dat=
a.html#working-with-missing-data" title=3D"Permalink to this headline">=C2=
=B6</a></h1>
<p>In this section, we will discuss missing (also referred to as NA) values=
 in
pandas.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">The choice of using <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">NaN</span></code> internally to denote missing =
data was largely
for simplicity and performance reasons. It differs from the MaskedArray
approach of, for example, <code class=3D"xref py py-mod docutils literal no=
translate"><span class=3D"pre">scikits.timeseries</span></code>. We are hop=
eful that
NumPy will soon be able to provide a native NA type solution (similar to R)
performant enough to be used in pandas.</p>
</div>
<p>See the <a class=3D"reference internal" href=3D"https://pandas.pydata.or=
g/pandas-docs/stable/cookbook.html#cookbook-missing-data"><span class=3D"st=
d std-ref">cookbook</span></a> for some advanced strategies.</p>
<div class=3D"section" id=3D"missing-data-basics">
<h2>Missing data basics<a class=3D"headerlink" href=3D"https://pandas.pydat=
a.org/pandas-docs/stable/missing_data.html#missing-data-basics" title=3D"Pe=
rmalink to this headline">=C2=B6</a></h2>
<div class=3D"section" id=3D"when-why-does-data-become-missing">
<h3>When / why does data become missing?<a class=3D"headerlink" href=3D"htt=
ps://pandas.pydata.org/pandas-docs/stable/missing_data.html#when-why-does-d=
ata-become-missing" title=3D"Permalink to this headline">=C2=B6</a></h3>
<p>Some might quibble over our usage of <em>missing</em>. By =E2=80=9Cmissi=
ng=E2=80=9D we simply mean
<strong>NA</strong> (=E2=80=9Cnot available=E2=80=9D) or =E2=80=9Cnot prese=
nt for whatever reason=E2=80=9D. Many data sets simply arrive with
missing data, either because it exists and was not collected or it never
existed. For example, in a collection of financial time series, some of the=
 time
series might start on different dates. Thus, values prior to the start date
would generally be marked as missing.</p>
<p>In pandas, one of the most common ways that missing data is <strong>intr=
oduced</strong> into
a data set is by reindexing. For example:</p>
<div class=3D"highlight-ipython notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">In [1]: </span><span class=3D"n">df</span> =
<span class=3D"o">=3D</span> <span class=3D"n">pd</span><span class=3D"o">.=
</span><span class=3D"n">DataFrame</span><span class=3D"p">(</span><span cl=
ass=3D"n">np</span><span class=3D"o">.</span><span class=3D"n">random</span=
><span class=3D"o">.</span><span class=3D"n">randn</span><span class=3D"p">=
(</span><span class=3D"mi">5</span><span class=3D"p">,</span> <span class=
=3D"mi">3</span><span class=3D"p">),</span> <span class=3D"n">index</span><=
span class=3D"o">=3D</span><span class=3D"p">[</span><span class=3D"s1">'a'=
</span><span class=3D"p">,</span> <span class=3D"s1">'c'</span><span class=
=3D"p">,</span> <span class=3D"s1">'e'</span><span class=3D"p">,</span> <sp=
an class=3D"s1">'f'</span><span class=3D"p">,</span> <span class=3D"s1">'h'=
</span><span class=3D"p">],</span>
<span class=3D"gp">   ...: </span>                  <span class=3D"n">colum=
ns</span><span class=3D"o">=3D</span><span class=3D"p">[</span><span class=
=3D"s1">'one'</span><span class=3D"p">,</span> <span class=3D"s1">'two'</sp=
an><span class=3D"p">,</span> <span class=3D"s1">'three'</span><span class=
=3D"p">])</span>
<span class=3D"gp">   ...: </span>

<span class=3D"gp">In [2]: </span><span class=3D"n">df</span><span class=3D=
"p">[</span><span class=3D"s1">'four'</span><span class=3D"p">]</span> <spa=
n class=3D"o">=3D</span> <span class=3D"s1">'bar'</span>

<span class=3D"gp">In [3]: </span><span class=3D"n">df</span><span class=3D=
"p">[</span><span class=3D"s1">'five'</span><span class=3D"p">]</span> <spa=
n class=3D"o">=3D</span> <span class=3D"n">df</span><span class=3D"p">[</sp=
an><span class=3D"s1">'one'</span><span class=3D"p">]</span> <span class=3D=
"o">&gt;</span> <span class=3D"mi">0</span>

<span class=3D"gp">In [4]: </span><span class=3D"n">df</span>
<span class=3D"gh">Out[4]: </span><span class=3D"go"></span>
<span class=3D"go">        one       two     three four   five</span>
<span class=3D"go">a -0.166778  0.501113 -0.355322  bar  False</span>
<span class=3D"go">c -0.337890  0.580967  0.983801  bar  False</span>
<span class=3D"go">e  0.057802  0.761948 -0.712964  bar   True</span>
<span class=3D"go">f -0.443160 -0.974602  1.047704  bar  False</span>
<span class=3D"go">h -0.717852 -1.053898 -0.019369  bar  False</span>

<span class=3D"gp">In [5]: </span><span class=3D"n">df2</span> <span class=
=3D"o">=3D</span> <span class=3D"n">df</span><span class=3D"o">.</span><spa=
n class=3D"n">reindex</span><span class=3D"p">([</span><span class=3D"s1">'=
a'</span><span class=3D"p">,</span> <span class=3D"s1">'b'</span><span clas=
s=3D"p">,</span> <span class=3D"s1">'c'</span><span class=3D"p">,</span> <s=
pan class=3D"s1">'d'</span><span class=3D"p">,</span> <span class=3D"s1">'e=
'</span><span class=3D"p">,</span> <span class=3D"s1">'f'</span><span class=
=3D"p">,</span> <span class=3D"s1">'g'</span><span class=3D"p">,</span> <sp=
an class=3D"s1">'h'</span><span class=3D"p">])</span>

<span class=3D"gp">In [6]: </span><span class=3D"n">df2</span>
<span class=3D"gh">Out[6]: </span><span class=3D"go"></span>
<span class=3D"go">        one       two     three four   five</span>
<span class=3D"go">a -0.166778  0.501113 -0.355322  bar  False</span>
<span class=3D"go">b       NaN       NaN       NaN  NaN    NaN</span>
<span class=3D"go">c -0.337890  0.580967  0.983801  bar  False</span>
<span class=3D"go">d       NaN       NaN       NaN  NaN    NaN</span>
<span class=3D"go">e  0.057802  0.761948 -0.712964  bar   True</span>
<span class=3D"go">f -0.443160 -0.974602  1.047704  bar  False</span>
<span class=3D"go">g       NaN       NaN       NaN  NaN    NaN</span>
<span class=3D"go">h -0.717852 -1.053898 -0.019369  bar  False</span>
</pre></div>
</div>
</div>
<div class=3D"section" id=3D"values-considered-missing">
<h3>Values considered =E2=80=9Cmissing=E2=80=9D<a class=3D"headerlink" href=
=3D"https://pandas.pydata.org/pandas-docs/stable/missing_data.html#values-c=
onsidered-missing" title=3D"Permalink to this headline">=C2=B6</a></h3>
<p>As data comes in many shapes and forms, pandas aims to be flexible with =
regard
to handling missing data. While <code class=3D"docutils literal notranslate=
"><span class=3D"pre">NaN</span></code> is the default missing value marker=
 for
reasons of computational speed and convenience, we need to be able to easil=
y
detect this value with data of different types: floating point, integer,
boolean, and general object. In many cases, however, the Python <code class=
=3D"docutils literal notranslate"><span class=3D"pre">None</span></code> wi=
ll
arise and we wish to also consider that =E2=80=9Cmissing=E2=80=9D or =E2=80=
=9Cnot available=E2=80=9D or =E2=80=9CNA=E2=80=9D.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">If you want to consider <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">inf</span></code> and <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">-inf</span></code> to be =E2=80=
=9CNA=E2=80=9D in computations,
you can set <code class=3D"docutils literal notranslate"><span class=3D"pre=
">pandas.options.mode.use_inf_as_na</span> <span class=3D"pre">=3D</span> <=
span class=3D"pre">True</span></code>.</p>
</div>
<p id=3D"missing-isna">To make detecting missing values easier (and across =
different array dtypes),
pandas provides the <a class=3D"reference internal" href=3D"https://pandas.=
pydata.org/pandas-docs/stable/generated/pandas.isna.html#pandas.isna" title=
=3D"pandas.isna"><code class=3D"xref py py-func docutils literal notranslat=
e"><span class=3D"pre">isna()</span></code></a> and
<a class=3D"reference internal" href=3D"https://pandas.pydata.org/pandas-do=
cs/stable/generated/pandas.notna.html#pandas.notna" title=3D"pandas.notna">=
<code class=3D"xref py py-func docutils literal notranslate"><span class=3D=
"pre">notna()</span></code></a> functions, which are also methods on
Series and DataFrame objects:</p>
<div class=3D"highlight-ipython notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">In [7]: </span><span class=3D"n">df2</span>=
<span class=3D"p">[</span><span class=3D"s1">'one'</span><span class=3D"p">=
]</span>
<span class=3D"gh">Out[7]: </span><span class=3D"go"></span>
<span class=3D"go">a   -0.166778</span>
<span class=3D"go">b         NaN</span>
<span class=3D"go">c   -0.337890</span>
<span class=3D"go">d         NaN</span>
<span class=3D"go">e    0.057802</span>
<span class=3D"go">f   -0.443160</span>
<span class=3D"go">g         NaN</span>
<span class=3D"go">h   -0.717852</span>
<span class=3D"go">Name: one, dtype: float64</span>

<span class=3D"gp">In [8]: </span><span class=3D"n">pd</span><span class=3D=
"o">.</span><span class=3D"n">isna</span><span class=3D"p">(</span><span cl=
ass=3D"n">df2</span><span class=3D"p">[</span><span class=3D"s1">'one'</spa=
n><span class=3D"p">])</span>
<span class=3D"go">Out[8]: </span>
<span class=3D"go">a    False</span>
<span class=3D"go">b     True</span>
<span class=3D"go">c    False</span>
<span class=3D"go">d     True</span>
<span class=3D"go">e    False</span>
<span class=3D"go">f    False</span>
<span class=3D"go">g     True</span>
<span class=3D"go">h    False</span>
<span class=3D"go">Name: one, dtype: bool</span>

<span class=3D"gp">In [9]: </span><span class=3D"n">df2</span><span class=
=3D"p">[</span><span class=3D"s1">'four'</span><span class=3D"p">]</span><s=
pan class=3D"o">.</span><span class=3D"n">notna</span><span class=3D"p">()<=
/span>
<span class=3D"go">Out[9]: </span>
<span class=3D"go">a     True</span>
<span class=3D"go">b    False</span>
<span class=3D"go">c     True</span>
<span class=3D"go">d    False</span>
<span class=3D"go">e     True</span>
<span class=3D"go">f     True</span>
<span class=3D"go">g    False</span>
<span class=3D"go">h     True</span>
<span class=3D"go">Name: four, dtype: bool</span>

<span class=3D"gp">In [10]: </span><span class=3D"n">df2</span><span class=
=3D"o">.</span><span class=3D"n">isna</span><span class=3D"p">()</span>
<span class=3D"go">Out[10]: </span>
<span class=3D"go">     one    two  three   four   five</span>
<span class=3D"go">a  False  False  False  False  False</span>
<span class=3D"go">b   True   True   True   True   True</span>
<span class=3D"go">c  False  False  False  False  False</span>
<span class=3D"go">d   True   True   True   True   True</span>
<span class=3D"go">e  False  False  False  False  False</span>
<span class=3D"go">f  False  False  False  False  False</span>
<span class=3D"go">g   True   True   True   True   True</span>
<span class=3D"go">h  False  False  False  False  False</span>
</pre></div>
</div>
<div class=3D"admonition warning">
<p class=3D"first admonition-title">Warning</p>
<p>One has to be mindful that in Python (and NumPy), the <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">nan's</span></code> don=E2=
=80=99t compare equal, but <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">None's</span></code> <strong>do</strong>.
Note that pandas/NumPy uses the fact that <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">np.nan</span> <span class=3D"pre">!=3D</spa=
n> <span class=3D"pre">np.nan</span></code>, and treats <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">None</span></code> like <code=
 class=3D"docutils literal notranslate"><span class=3D"pre">np.nan</span></=
code>.</p>
<div class=3D"highlight-ipython notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">In [11]: </span><span class=3D"bp">None</sp=
an> <span class=3D"o">=3D=3D</span> <span class=3D"bp">None</span>
<span class=3D"gh">Out[11]: </span><span class=3D"go">True</span>

<span class=3D"gp">In [12]: </span><span class=3D"n">np</span><span class=
=3D"o">.</span><span class=3D"n">nan</span> <span class=3D"o">=3D=3D</span>=
 <span class=3D"n">np</span><span class=3D"o">.</span><span class=3D"n">nan=
</span>
<span class=3D"go">Out[12]: False</span>
</pre></div>
</div>
<p>So as compared to above, a scalar equality comparison versus a <code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">None/np.nan</span><=
/code> doesn=E2=80=99t provide useful information.</p>
<div class=3D"last highlight-ipython notranslate"><div class=3D"highlight">=
<pre><span></span><span class=3D"gp">In [13]: </span><span class=3D"n">df2<=
/span><span class=3D"p">[</span><span class=3D"s1">'one'</span><span class=
=3D"p">]</span> <span class=3D"o">=3D=3D</span> <span class=3D"n">np</span>=
<span class=3D"o">.</span><span class=3D"n">nan</span>
<span class=3D"gh">Out[13]: </span><span class=3D"go"></span>
<span class=3D"go">a    False</span>
<span class=3D"go">b    False</span>
<span class=3D"go">c    False</span>
<span class=3D"go">d    False</span>
<span class=3D"go">e    False</span>
<span class=3D"go">f    False</span>
<span class=3D"go">g    False</span>
<span class=3D"go">h    False</span>
<span class=3D"go">Name: one, dtype: bool</span>
</pre></div>
</div>
</div>
</div>
</div>
<div class=3D"section" id=3D"datetimes">
<h2>Datetimes<a class=3D"headerlink" href=3D"https://pandas.pydata.org/pand=
as-docs/stable/missing_data.html#datetimes" title=3D"Permalink to this head=
line">=C2=B6</a></h2>
<p>For datetime64[ns] types, <code class=3D"docutils literal notranslate"><=
span class=3D"pre">NaT</span></code> represents missing values. This is a p=
seudo-native
sentinel value that can be represented by NumPy in a singular dtype (dateti=
me64[ns]).
pandas objects provide intercompatibility between <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">NaT</span></code> and <code class=
=3D"docutils literal notranslate"><span class=3D"pre">NaN</span></code>.</p=
>
<div class=3D"highlight-ipython notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">In [14]: </span><span class=3D"n">df2</span=
> <span class=3D"o">=3D</span> <span class=3D"n">df</span><span class=3D"o"=
>.</span><span class=3D"n">copy</span><span class=3D"p">()</span>

<span class=3D"gp">In [15]: </span><span class=3D"n">df2</span><span class=
=3D"p">[</span><span class=3D"s1">'timestamp'</span><span class=3D"p">]</sp=
an> <span class=3D"o">=3D</span> <span class=3D"n">pd</span><span class=3D"=
o">.</span><span class=3D"n">Timestamp</span><span class=3D"p">(</span><spa=
n class=3D"s1">'20120101'</span><span class=3D"p">)</span>

<span class=3D"gp">In [16]: </span><span class=3D"n">df2</span>
<span class=3D"gh">Out[16]: </span><span class=3D"go"></span>
<span class=3D"go">        one       two     three four   five  timestamp</=
span>
<span class=3D"go">a -0.166778  0.501113 -0.355322  bar  False 2012-01-01</=
span>
<span class=3D"go">c -0.337890  0.580967  0.983801  bar  False 2012-01-01</=
span>
<span class=3D"go">e  0.057802  0.761948 -0.712964  bar   True 2012-01-01</=
span>
<span class=3D"go">f -0.443160 -0.974602  1.047704  bar  False 2012-01-01</=
span>
<span class=3D"go">h -0.717852 -1.053898 -0.019369  bar  False 2012-01-01</=
span>

<span class=3D"gp">In [17]: </span><span class=3D"n">df2</span><span class=
=3D"o">.</span><span class=3D"n">loc</span><span class=3D"p">[[</span><span=
 class=3D"s1">'a'</span><span class=3D"p">,</span><span class=3D"s1">'c'</s=
pan><span class=3D"p">,</span><span class=3D"s1">'h'</span><span class=3D"p=
">],[</span><span class=3D"s1">'one'</span><span class=3D"p">,</span><span =
class=3D"s1">'timestamp'</span><span class=3D"p">]]</span> <span class=3D"o=
">=3D</span> <span class=3D"n">np</span><span class=3D"o">.</span><span cla=
ss=3D"n">nan</span>

<span class=3D"gp">In [18]: </span><span class=3D"n">df2</span>
<span class=3D"gh">Out[18]: </span><span class=3D"go"></span>
<span class=3D"go">        one       two     three four   five  timestamp</=
span>
<span class=3D"go">a       NaN  0.501113 -0.355322  bar  False        NaT</=
span>
<span class=3D"go">c       NaN  0.580967  0.983801  bar  False        NaT</=
span>
<span class=3D"go">e  0.057802  0.761948 -0.712964  bar   True 2012-01-01</=
span>
<span class=3D"go">f -0.443160 -0.974602  1.047704  bar  False 2012-01-01</=
span>
<span class=3D"go">h       NaN -1.053898 -0.019369  bar  False        NaT</=
span>

<span class=3D"gp">In [19]: </span><span class=3D"n">df2</span><span class=
=3D"o">.</span><span class=3D"n">get_dtype_counts</span><span class=3D"p">(=
)</span>
<span class=3D"go">Out[19]: </span>
<span class=3D"go">float64           3</span>
<span class=3D"go">object            1</span>
<span class=3D"go">bool              1</span>
<span class=3D"go">datetime64[ns]    1</span>
<span class=3D"go">dtype: int64</span>
</pre></div>
</div>
</div>
<div class=3D"section" id=3D"inserting-missing-data">
<span id=3D"missing-inserting"></span><h2>Inserting missing data<a class=3D=
"headerlink" href=3D"https://pandas.pydata.org/pandas-docs/stable/missing_d=
ata.html#inserting-missing-data" title=3D"Permalink to this headline">=C2=
=B6</a></h2>
<p>You can insert missing values by simply assigning to containers. The
actual missing value used will be chosen based on the dtype.</p>
<p>For example, numeric containers will always use <code class=3D"docutils =
literal notranslate"><span class=3D"pre">NaN</span></code> regardless of
the missing value type chosen:</p>
<div class=3D"highlight-ipython notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">In [20]: </span><span class=3D"n">s</span> =
<span class=3D"o">=3D</span> <span class=3D"n">pd</span><span class=3D"o">.=
</span><span class=3D"n">Series</span><span class=3D"p">([</span><span clas=
s=3D"mi">1</span><span class=3D"p">,</span> <span class=3D"mi">2</span><spa=
n class=3D"p">,</span> <span class=3D"mi">3</span><span class=3D"p">])</spa=
n>

<span class=3D"gp">In [21]: </span><span class=3D"n">s</span><span class=3D=
"o">.</span><span class=3D"n">loc</span><span class=3D"p">[</span><span cla=
ss=3D"mi">0</span><span class=3D"p">]</span> <span class=3D"o">=3D</span> <=
span class=3D"bp">None</span>

<span class=3D"gp">In [22]: </span><span class=3D"n">s</span>
<span class=3D"gh">Out[22]: </span><span class=3D"go"></span>
<span class=3D"go">0    NaN</span>
<span class=3D"go">1    2.0</span>
<span class=3D"go">2    3.0</span>
<span class=3D"go">dtype: float64</span>
</pre></div>
</div>
<p>Likewise, datetime containers will always use <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">NaT</span></code>.</p>
<p>For object containers, pandas will use the value given:</p>
<div class=3D"highlight-ipython notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">In [23]: </span><span class=3D"n">s</span> =
<span class=3D"o">=3D</span> <span class=3D"n">pd</span><span class=3D"o">.=
</span><span class=3D"n">Series</span><span class=3D"p">([</span><span clas=
s=3D"s2">"a"</span><span class=3D"p">,</span> <span class=3D"s2">"b"</span>=
<span class=3D"p">,</span> <span class=3D"s2">"c"</span><span class=3D"p">]=
)</span>

<span class=3D"gp">In [24]: </span><span class=3D"n">s</span><span class=3D=
"o">.</span><span class=3D"n">loc</span><span class=3D"p">[</span><span cla=
ss=3D"mi">0</span><span class=3D"p">]</span> <span class=3D"o">=3D</span> <=
span class=3D"bp">None</span>

<span class=3D"gp">In [25]: </span><span class=3D"n">s</span><span class=3D=
"o">.</span><span class=3D"n">loc</span><span class=3D"p">[</span><span cla=
ss=3D"mi">1</span><span class=3D"p">]</span> <span class=3D"o">=3D</span> <=
span class=3D"n">np</span><span class=3D"o">.</span><span class=3D"n">nan</=
span>

<span class=3D"gp">In [26]: </span><span class=3D"n">s</span>
<span class=3D"gh">Out[26]: </span><span class=3D"go"></span>
<span class=3D"go">0    None</span>
<span class=3D"go">1     NaN</span>
<span class=3D"go">2       c</span>
<span class=3D"go">dtype: object</span>
</pre></div>
</div>
</div>
<div class=3D"section" id=3D"calculations-with-missing-data">
<h2>Calculations with missing data<a class=3D"headerlink" href=3D"https://p=
andas.pydata.org/pandas-docs/stable/missing_data.html#calculations-with-mis=
sing-data" title=3D"Permalink to this headline">=C2=B6</a></h2>
<p>Missing values propagate naturally through arithmetic operations between=
 pandas
objects.</p>
<div class=3D"highlight-ipython notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">In [27]: </span><span class=3D"n">a</span>
<span class=3D"gh">Out[27]: </span><span class=3D"go"></span>
<span class=3D"go">        one       two</span>
<span class=3D"go">a       NaN  0.501113</span>
<span class=3D"go">c       NaN  0.580967</span>
<span class=3D"go">e  0.057802  0.761948</span>
<span class=3D"go">f -0.443160 -0.974602</span>
<span class=3D"go">h -0.443160 -1.053898</span>

<span class=3D"gp">In [28]: </span><span class=3D"n">b</span>
<span class=3D"go">Out[28]: </span>
<span class=3D"go">        one       two     three</span>
<span class=3D"go">a       NaN  0.501113 -0.355322</span>
<span class=3D"go">c       NaN  0.580967  0.983801</span>
<span class=3D"go">e  0.057802  0.761948 -0.712964</span>
<span class=3D"go">f -0.443160 -0.974602  1.047704</span>
<span class=3D"go">h       NaN -1.053898 -0.019369</span>

<span class=3D"gp">In [29]: </span><span class=3D"n">a</span> <span class=
=3D"o">+</span> <span class=3D"n">b</span>
<span class=3D"go">Out[29]: </span>
<span class=3D"go">        one  three       two</span>
<span class=3D"go">a       NaN    NaN  1.002226</span>
<span class=3D"go">c       NaN    NaN  1.161935</span>
<span class=3D"go">e  0.115604    NaN  1.523896</span>
<span class=3D"go">f -0.886321    NaN -1.949205</span>
<span class=3D"go">h       NaN    NaN -2.107796</span>
</pre></div>
</div>
<p>The descriptive statistics and computational methods discussed in the
<a class=3D"reference internal" href=3D"https://pandas.pydata.org/pandas-do=
cs/stable/basics.html#basics-stats"><span class=3D"std std-ref">data struct=
ure overview</span></a> (and listed <a class=3D"reference internal" href=3D=
"https://pandas.pydata.org/pandas-docs/stable/api.html#api-series-stats"><s=
pan class=3D"std std-ref">here</span></a> and <a class=3D"reference interna=
l" href=3D"https://pandas.pydata.org/pandas-docs/stable/api.html#api-datafr=
ame-stats"><span class=3D"std std-ref">here</span></a>) are all written to
account for missing data. For example:</p>
<ul class=3D"simple">
<li>When summing data, NA (missing) values will be treated as zero.</li>
<li>If the data are all NA, the result will be 0.</li>
<li>Cumulative methods like <a class=3D"reference internal" href=3D"https:/=
/pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.cumsum.htm=
l#pandas.DataFrame.cumsum" title=3D"pandas.DataFrame.cumsum"><code class=3D=
"xref py py-meth docutils literal notranslate"><span class=3D"pre">cumsum()=
</span></code></a> and <a class=3D"reference internal" href=3D"https://pand=
as.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.cumprod.html#pa=
ndas.DataFrame.cumprod" title=3D"pandas.DataFrame.cumprod"><code class=3D"x=
ref py py-meth docutils literal notranslate"><span class=3D"pre">cumprod()<=
/span></code></a> ignore NA values by default, but preserve them in the res=
ulting arrays. To override this behaviour and include NA values, use <code =
class=3D"docutils literal notranslate"><span class=3D"pre">skipna=3DFalse</=
span></code>.</li>
</ul>
<div class=3D"highlight-ipython notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">In [30]: </span><span class=3D"n">df</span>
<span class=3D"gh">Out[30]: </span><span class=3D"go"></span>
<span class=3D"go">        one       two     three</span>
<span class=3D"go">a       NaN  0.501113 -0.355322</span>
<span class=3D"go">c       NaN  0.580967  0.983801</span>
<span class=3D"go">e  0.057802  0.761948 -0.712964</span>
<span class=3D"go">f -0.443160 -0.974602  1.047704</span>
<span class=3D"go">h       NaN -1.053898 -0.019369</span>

<span class=3D"gp">In [31]: </span><span class=3D"n">df</span><span class=
=3D"p">[</span><span class=3D"s1">'one'</span><span class=3D"p">]</span><sp=
an class=3D"o">.</span><span class=3D"n">sum</span><span class=3D"p">()</sp=
an>
<span class=3D"go">Out[31]: -0.38535826528461409</span>

<span class=3D"gp">In [32]: </span><span class=3D"n">df</span><span class=
=3D"o">.</span><span class=3D"n">mean</span><span class=3D"p">(</span><span=
 class=3D"mi">1</span><span class=3D"p">)</span>
<span class=3D"go">Out[32]: </span>
<span class=3D"go">a    0.072895</span>
<span class=3D"go">c    0.782384</span>
<span class=3D"go">e    0.035595</span>
<span class=3D"go">f   -0.123353</span>
<span class=3D"go">h   -0.536633</span>
<span class=3D"go">dtype: float64</span>

<span class=3D"gp">In [33]: </span><span class=3D"n">df</span><span class=
=3D"o">.</span><span class=3D"n">cumsum</span><span class=3D"p">()</span>
<span class=3D"go">Out[33]: </span>
<span class=3D"go">        one       two     three</span>
<span class=3D"go">a       NaN  0.501113 -0.355322</span>
<span class=3D"go">c       NaN  1.082080  0.628479</span>
<span class=3D"go">e  0.057802  1.844028 -0.084485</span>
<span class=3D"go">f -0.385358  0.869426  0.963219</span>
<span class=3D"go">h       NaN -0.184472  0.943850</span>

<span class=3D"gp">In [34]: </span><span class=3D"n">df</span><span class=
=3D"o">.</span><span class=3D"n">cumsum</span><span class=3D"p">(</span><sp=
an class=3D"n">skipna</span><span class=3D"o">=3D</span><span class=3D"bp">=
False</span><span class=3D"p">)</span>
<span class=3D"go">Out[34]: </span>
<span class=3D"go">   one       two     three</span>
<span class=3D"go">a  NaN  0.501113 -0.355322</span>
<span class=3D"go">c  NaN  1.082080  0.628479</span>
<span class=3D"go">e  NaN  1.844028 -0.084485</span>
<span class=3D"go">f  NaN  0.869426  0.963219</span>
<span class=3D"go">h  NaN -0.184472  0.943850</span>
</pre></div>
</div>
<div class=3D"section" id=3D"sum-prod-of-empties-nans">
<span id=3D"missing-data-numeric-sum"></span><h3>Sum/Prod of Empties/Nans<a=
 class=3D"headerlink" href=3D"https://pandas.pydata.org/pandas-docs/stable/=
missing_data.html#sum-prod-of-empties-nans" title=3D"Permalink to this head=
line">=C2=B6</a></h3>
<div class=3D"admonition warning">
<p class=3D"first admonition-title">Warning</p>
<p class=3D"last">This behavior is now standard as of v0.22.0 and is consis=
tent with the default in <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">numpy</span></code>; previously sum/prod of all-NA or empty =
Series/DataFrames would return NaN.
See <a class=3D"reference internal" href=3D"https://pandas.pydata.org/panda=
s-docs/stable/whatsnew.html#whatsnew-0220"><span class=3D"std std-ref">v0.2=
2.0 whatsnew</span></a> for more.</p>
</div>
<p>The sum of an empty or all-NA Series or column of a DataFrame is 0.</p>
<div class=3D"highlight-ipython notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">In [35]: </span><span class=3D"n">pd</span>=
<span class=3D"o">.</span><span class=3D"n">Series</span><span class=3D"p">=
([</span><span class=3D"n">np</span><span class=3D"o">.</span><span class=
=3D"n">nan</span><span class=3D"p">])</span><span class=3D"o">.</span><span=
 class=3D"n">sum</span><span class=3D"p">()</span>
<span class=3D"gh">Out[35]: </span><span class=3D"go">0.0</span>

<span class=3D"gp">In [36]: </span><span class=3D"n">pd</span><span class=
=3D"o">.</span><span class=3D"n">Series</span><span class=3D"p">([])</span>=
<span class=3D"o">.</span><span class=3D"n">sum</span><span class=3D"p">()<=
/span>
<span class=3D"go">Out[36]: 0.0</span>
</pre></div>
</div>
<p>The product of an empty or all-NA Series or column of a DataFrame is 1.<=
/p>
<div class=3D"highlight-ipython notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">In [37]: </span><span class=3D"n">pd</span>=
<span class=3D"o">.</span><span class=3D"n">Series</span><span class=3D"p">=
([</span><span class=3D"n">np</span><span class=3D"o">.</span><span class=
=3D"n">nan</span><span class=3D"p">])</span><span class=3D"o">.</span><span=
 class=3D"n">prod</span><span class=3D"p">()</span>
<span class=3D"gh">Out[37]: </span><span class=3D"go">1.0</span>

<span class=3D"gp">In [38]: </span><span class=3D"n">pd</span><span class=
=3D"o">.</span><span class=3D"n">Series</span><span class=3D"p">([])</span>=
<span class=3D"o">.</span><span class=3D"n">prod</span><span class=3D"p">()=
</span>
<span class=3D"go">Out[38]: 1.0</span>
</pre></div>
</div>
</div>
<div class=3D"section" id=3D"na-values-in-groupby">
<h3>NA values in GroupBy<a class=3D"headerlink" href=3D"https://pandas.pyda=
ta.org/pandas-docs/stable/missing_data.html#na-values-in-groupby" title=3D"=
Permalink to this headline">=C2=B6</a></h3>
<p>NA groups in GroupBy are automatically excluded. This behavior is consis=
tent
with R, for example:</p>
<div class=3D"highlight-ipython notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">In [39]: </span><span class=3D"n">df</span>
<span class=3D"gh">Out[39]: </span><span class=3D"go"></span>
<span class=3D"go">        one       two     three</span>
<span class=3D"go">a       NaN  0.501113 -0.355322</span>
<span class=3D"go">c       NaN  0.580967  0.983801</span>
<span class=3D"go">e  0.057802  0.761948 -0.712964</span>
<span class=3D"go">f -0.443160 -0.974602  1.047704</span>
<span class=3D"go">h       NaN -1.053898 -0.019369</span>

<span class=3D"gp">In [40]: </span><span class=3D"n">df</span><span class=
=3D"o">.</span><span class=3D"n">groupby</span><span class=3D"p">(</span><s=
pan class=3D"s1">'one'</span><span class=3D"p">)</span><span class=3D"o">.<=
/span><span class=3D"n">mean</span><span class=3D"p">()</span>
<span class=3D"go">Out[40]: </span>
<span class=3D"go">                two     three</span>
<span class=3D"go">one                          </span>
<span class=3D"go">-0.443160 -0.974602  1.047704</span>
<span class=3D"go"> 0.057802  0.761948 -0.712964</span>
</pre></div>
</div>
<p>See the groupby section <a class=3D"reference internal" href=3D"https://=
pandas.pydata.org/pandas-docs/stable/groupby.html#groupby-missing"><span cl=
ass=3D"std std-ref">here</span></a> for more information.</p>
</div>
</div>
<div class=3D"section" id=3D"cleaning-filling-missing-data">
<h2>Cleaning / filling missing data<a class=3D"headerlink" href=3D"https://=
pandas.pydata.org/pandas-docs/stable/missing_data.html#cleaning-filling-mis=
sing-data" title=3D"Permalink to this headline">=C2=B6</a></h2>
<p>pandas objects are equipped with various data manipulation methods for d=
ealing
with missing data.</p>
<div class=3D"section" id=3D"filling-missing-values-fillna">
<span id=3D"missing-data-fillna"></span><h3>Filling missing values: fillna<=
a class=3D"headerlink" href=3D"https://pandas.pydata.org/pandas-docs/stable=
/missing_data.html#filling-missing-values-fillna" title=3D"Permalink to thi=
s headline">=C2=B6</a></h3>
<p><a class=3D"reference internal" href=3D"https://pandas.pydata.org/pandas=
-docs/stable/generated/pandas.DataFrame.fillna.html#pandas.DataFrame.fillna=
" title=3D"pandas.DataFrame.fillna"><code class=3D"xref py py-meth docutils=
 literal notranslate"><span class=3D"pre">fillna()</span></code></a> can =
=E2=80=9Cfill in=E2=80=9D NA values with non-NA data in a couple
of ways, which we illustrate:</p>
<p><strong>Replace NA with a scalar value</strong></p>
<div class=3D"highlight-ipython notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">In [41]: </span><span class=3D"n">df2</span=
>
<span class=3D"gh">Out[41]: </span><span class=3D"go"></span>
<span class=3D"go">        one       two     three four   five  timestamp</=
span>
<span class=3D"go">a       NaN  0.501113 -0.355322  bar  False        NaT</=
span>
<span class=3D"go">c       NaN  0.580967  0.983801  bar  False        NaT</=
span>
<span class=3D"go">e  0.057802  0.761948 -0.712964  bar   True 2012-01-01</=
span>
<span class=3D"go">f -0.443160 -0.974602  1.047704  bar  False 2012-01-01</=
span>
<span class=3D"go">h       NaN -1.053898 -0.019369  bar  False        NaT</=
span>

<span class=3D"gp">In [42]: </span><span class=3D"n">df2</span><span class=
=3D"o">.</span><span class=3D"n">fillna</span><span class=3D"p">(</span><sp=
an class=3D"mi">0</span><span class=3D"p">)</span>
<span class=3D"go">Out[42]: </span>
<span class=3D"go">        one       two     three four   five            t=
imestamp</span>
<span class=3D"go">a  0.000000  0.501113 -0.355322  bar  False             =
       0</span>
<span class=3D"go">c  0.000000  0.580967  0.983801  bar  False             =
       0</span>
<span class=3D"go">e  0.057802  0.761948 -0.712964  bar   True  2012-01-01 =
00:00:00</span>
<span class=3D"go">f -0.443160 -0.974602  1.047704  bar  False  2012-01-01 =
00:00:00</span>
<span class=3D"go">h  0.000000 -1.053898 -0.019369  bar  False             =
       0</span>

<span class=3D"gp">In [43]: </span><span class=3D"n">df2</span><span class=
=3D"p">[</span><span class=3D"s1">'one'</span><span class=3D"p">]</span><sp=
an class=3D"o">.</span><span class=3D"n">fillna</span><span class=3D"p">(</=
span><span class=3D"s1">'missing'</span><span class=3D"p">)</span>
<span class=3D"go">Out[43]: </span>
<span class=3D"go">a     missing</span>
<span class=3D"go">c     missing</span>
<span class=3D"go">e    0.057802</span>
<span class=3D"go">f    -0.44316</span>
<span class=3D"go">h     missing</span>
<span class=3D"go">Name: one, dtype: object</span>
</pre></div>
</div>
<p><strong>Fill gaps forward or backward</strong></p>
<p>Using the same filling arguments as <a class=3D"reference internal" href=
=3D"https://pandas.pydata.org/pandas-docs/stable/basics.html#basics-reindex=
ing"><span class=3D"std std-ref">reindexing</span></a>, we
can propagate non-NA values forward or backward:</p>
<div class=3D"highlight-ipython notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">In [44]: </span><span class=3D"n">df</span>
<span class=3D"gh">Out[44]: </span><span class=3D"go"></span>
<span class=3D"go">        one       two     three</span>
<span class=3D"go">a       NaN  0.501113 -0.355322</span>
<span class=3D"go">c       NaN  0.580967  0.983801</span>
<span class=3D"go">e  0.057802  0.761948 -0.712964</span>
<span class=3D"go">f -0.443160 -0.974602  1.047704</span>
<span class=3D"go">h       NaN -1.053898 -0.019369</span>

<span class=3D"gp">In [45]: </span><span class=3D"n">df</span><span class=
=3D"o">.</span><span class=3D"n">fillna</span><span class=3D"p">(</span><sp=
an class=3D"n">method</span><span class=3D"o">=3D</span><span class=3D"s1">=
'pad'</span><span class=3D"p">)</span>
<span class=3D"go">Out[45]: </span>
<span class=3D"go">        one       two     three</span>
<span class=3D"go">a       NaN  0.501113 -0.355322</span>
<span class=3D"go">c       NaN  0.580967  0.983801</span>
<span class=3D"go">e  0.057802  0.761948 -0.712964</span>
<span class=3D"go">f -0.443160 -0.974602  1.047704</span>
<span class=3D"go">h -0.443160 -1.053898 -0.019369</span>
</pre></div>
</div>
<p id=3D"missing-data-fillna-limit"><strong>Limit the amount of filling</st=
rong></p>
<p>If we only want consecutive gaps filled up to a certain number of data p=
oints,
we can use the <cite>limit</cite> keyword:</p>
<div class=3D"highlight-ipython notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">In [46]: </span><span class=3D"n">df</span>
<span class=3D"gh">Out[46]: </span><span class=3D"go"></span>
<span class=3D"go">   one       two     three</span>
<span class=3D"go">a  NaN  0.501113 -0.355322</span>
<span class=3D"go">c  NaN  0.580967  0.983801</span>
<span class=3D"go">e  NaN       NaN       NaN</span>
<span class=3D"go">f  NaN       NaN       NaN</span>
<span class=3D"go">h  NaN -1.053898 -0.019369</span>

<span class=3D"gp">In [47]: </span><span class=3D"n">df</span><span class=
=3D"o">.</span><span class=3D"n">fillna</span><span class=3D"p">(</span><sp=
an class=3D"n">method</span><span class=3D"o">=3D</span><span class=3D"s1">=
'pad'</span><span class=3D"p">,</span> <span class=3D"n">limit</span><span =
class=3D"o">=3D</span><span class=3D"mi">1</span><span class=3D"p">)</span>
<span class=3D"go">Out[47]: </span>
<span class=3D"go">   one       two     three</span>
<span class=3D"go">a  NaN  0.501113 -0.355322</span>
<span class=3D"go">c  NaN  0.580967  0.983801</span>
<span class=3D"go">e  NaN  0.580967  0.983801</span>
<span class=3D"go">f  NaN       NaN       NaN</span>
<span class=3D"go">h  NaN -1.053898 -0.019369</span>
</pre></div>
</div>
<p>To remind you, these are the available filling methods:</p>
<table border=3D"1" class=3D"colwidths-given docutils">
<colgroup>
<col width=3D"38%">
<col width=3D"63%">
</colgroup>
<thead valign=3D"bottom">
<tr class=3D"row-odd"><th class=3D"head">Method</th>
<th class=3D"head">Action</th>
</tr>
</thead>
<tbody valign=3D"top">
<tr class=3D"row-even"><td>pad / ffill</td>
<td>Fill values forward</td>
</tr>
<tr class=3D"row-odd"><td>bfill / backfill</td>
<td>Fill values backward</td>
</tr>
</tbody>
</table>
<p>With time series data, using pad/ffill is extremely common so that the =
=E2=80=9Clast
known value=E2=80=9D is available at every time point.</p>
<p><a class=3D"reference internal" href=3D"https://pandas.pydata.org/pandas=
-docs/stable/generated/pandas.DataFrame.ffill.html#pandas.DataFrame.ffill" =
title=3D"pandas.DataFrame.ffill"><code class=3D"xref py py-meth docutils li=
teral notranslate"><span class=3D"pre">ffill()</span></code></a> is equival=
ent to <code class=3D"docutils literal notranslate"><span class=3D"pre">fil=
lna(method=3D'ffill')</span></code>
and <a class=3D"reference internal" href=3D"https://pandas.pydata.org/panda=
s-docs/stable/generated/pandas.DataFrame.bfill.html#pandas.DataFrame.bfill"=
 title=3D"pandas.DataFrame.bfill"><code class=3D"xref py py-meth docutils l=
iteral notranslate"><span class=3D"pre">bfill()</span></code></a> is equiva=
lent to <code class=3D"docutils literal notranslate"><span class=3D"pre">fi=
llna(method=3D'bfill')</span></code></p>
</div>
<div class=3D"section" id=3D"filling-with-a-pandasobject">
<span id=3D"missing-data-pandasobject"></span><h3>Filling with a PandasObje=
ct<a class=3D"headerlink" href=3D"https://pandas.pydata.org/pandas-docs/sta=
ble/missing_data.html#filling-with-a-pandasobject" title=3D"Permalink to th=
is headline">=C2=B6</a></h3>
<p>You can also fillna using a dict or Series that is alignable. The labels=
 of the dict or index of the Series
must match the columns of the frame you wish to fill. The
use case of this is to fill a DataFrame with the mean of that column.</p>
<div class=3D"highlight-ipython notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">In [48]: </span><span class=3D"n">dff</span=
> <span class=3D"o">=3D</span> <span class=3D"n">pd</span><span class=3D"o"=
>.</span><span class=3D"n">DataFrame</span><span class=3D"p">(</span><span =
class=3D"n">np</span><span class=3D"o">.</span><span class=3D"n">random</sp=
an><span class=3D"o">.</span><span class=3D"n">randn</span><span class=3D"p=
">(</span><span class=3D"mi">10</span><span class=3D"p">,</span><span class=
=3D"mi">3</span><span class=3D"p">),</span> <span class=3D"n">columns</span=
><span class=3D"o">=3D</span><span class=3D"nb">list</span><span class=3D"p=
">(</span><span class=3D"s1">'ABC'</span><span class=3D"p">))</span>

<span class=3D"gp">In [49]: </span><span class=3D"n">dff</span><span class=
=3D"o">.</span><span class=3D"n">iloc</span><span class=3D"p">[</span><span=
 class=3D"mi">3</span><span class=3D"p">:</span><span class=3D"mi">5</span>=
<span class=3D"p">,</span><span class=3D"mi">0</span><span class=3D"p">]</s=
pan> <span class=3D"o">=3D</span> <span class=3D"n">np</span><span class=3D=
"o">.</span><span class=3D"n">nan</span>

<span class=3D"gp">In [50]: </span><span class=3D"n">dff</span><span class=
=3D"o">.</span><span class=3D"n">iloc</span><span class=3D"p">[</span><span=
 class=3D"mi">4</span><span class=3D"p">:</span><span class=3D"mi">6</span>=
<span class=3D"p">,</span><span class=3D"mi">1</span><span class=3D"p">]</s=
pan> <span class=3D"o">=3D</span> <span class=3D"n">np</span><span class=3D=
"o">.</span><span class=3D"n">nan</span>

<span class=3D"gp">In [51]: </span><span class=3D"n">dff</span><span class=
=3D"o">.</span><span class=3D"n">iloc</span><span class=3D"p">[</span><span=
 class=3D"mi">5</span><span class=3D"p">:</span><span class=3D"mi">8</span>=
<span class=3D"p">,</span><span class=3D"mi">2</span><span class=3D"p">]</s=
pan> <span class=3D"o">=3D</span> <span class=3D"n">np</span><span class=3D=
"o">.</span><span class=3D"n">nan</span>

<span class=3D"gp">In [52]: </span><span class=3D"n">dff</span>
<span class=3D"gh">Out[52]: </span><span class=3D"go"></span>
<span class=3D"go">          A         B         C</span>
<span class=3D"go">0  0.758887  2.340598  0.219039</span>
<span class=3D"go">1 -1.235583  0.031785  0.701683</span>
<span class=3D"go">2 -1.557016 -0.636986 -1.238610</span>
<span class=3D"go">3       NaN -1.002278  0.654052</span>
<span class=3D"go">4       NaN       NaN  1.053999</span>
<span class=3D"go">5  0.651981       NaN       NaN</span>
<span class=3D"go">6  0.109001 -0.533294       NaN</span>
<span class=3D"go">7 -1.037831 -1.150016       NaN</span>
<span class=3D"go">8 -0.687693  1.921056 -0.121113</span>
<span class=3D"go">9 -0.258742 -0.706329  0.402547</span>

<span class=3D"gp">In [53]: </span><span class=3D"n">dff</span><span class=
=3D"o">.</span><span class=3D"n">fillna</span><span class=3D"p">(</span><sp=
an class=3D"n">dff</span><span class=3D"o">.</span><span class=3D"n">mean</=
span><span class=3D"p">())</span>
<span class=3D"go">Out[53]: </span>
<span class=3D"go">          A         B         C</span>
<span class=3D"go">0  0.758887  2.340598  0.219039</span>
<span class=3D"go">1 -1.235583  0.031785  0.701683</span>
<span class=3D"go">2 -1.557016 -0.636986 -1.238610</span>
<span class=3D"go">3 -0.407125 -1.002278  0.654052</span>
<span class=3D"go">4 -0.407125  0.033067  1.053999</span>
<span class=3D"go">5  0.651981  0.033067  0.238800</span>
<span class=3D"go">6  0.109001 -0.533294  0.238800</span>
<span class=3D"go">7 -1.037831 -1.150016  0.238800</span>
<span class=3D"go">8 -0.687693  1.921056 -0.121113</span>
<span class=3D"go">9 -0.258742 -0.706329  0.402547</span>

<span class=3D"gp">In [54]: </span><span class=3D"n">dff</span><span class=
=3D"o">.</span><span class=3D"n">fillna</span><span class=3D"p">(</span><sp=
an class=3D"n">dff</span><span class=3D"o">.</span><span class=3D"n">mean</=
span><span class=3D"p">()[</span><span class=3D"s1">'B'</span><span class=
=3D"p">:</span><span class=3D"s1">'C'</span><span class=3D"p">])</span>
<span class=3D"go">Out[54]: </span>
<span class=3D"go">          A         B         C</span>
<span class=3D"go">0  0.758887  2.340598  0.219039</span>
<span class=3D"go">1 -1.235583  0.031785  0.701683</span>
<span class=3D"go">2 -1.557016 -0.636986 -1.238610</span>
<span class=3D"go">3       NaN -1.002278  0.654052</span>
<span class=3D"go">4       NaN  0.033067  1.053999</span>
<span class=3D"go">5  0.651981  0.033067  0.238800</span>
<span class=3D"go">6  0.109001 -0.533294  0.238800</span>
<span class=3D"go">7 -1.037831 -1.150016  0.238800</span>
<span class=3D"go">8 -0.687693  1.921056 -0.121113</span>
<span class=3D"go">9 -0.258742 -0.706329  0.402547</span>
</pre></div>
</div>
<p>Same result as above, but is aligning the =E2=80=98fill=E2=80=99 value w=
hich is
a Series in this case.</p>
<div class=3D"highlight-ipython notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">In [55]: </span><span class=3D"n">dff</span=
><span class=3D"o">.</span><span class=3D"n">where</span><span class=3D"p">=
(</span><span class=3D"n">pd</span><span class=3D"o">.</span><span class=3D=
"n">notna</span><span class=3D"p">(</span><span class=3D"n">dff</span><span=
 class=3D"p">),</span> <span class=3D"n">dff</span><span class=3D"o">.</spa=
n><span class=3D"n">mean</span><span class=3D"p">(),</span> <span class=3D"=
n">axis</span><span class=3D"o">=3D</span><span class=3D"s1">'columns'</spa=
n><span class=3D"p">)</span>
<span class=3D"gh">Out[55]: </span><span class=3D"go"></span>
<span class=3D"go">          A         B         C</span>
<span class=3D"go">0  0.758887  2.340598  0.219039</span>
<span class=3D"go">1 -1.235583  0.031785  0.701683</span>
<span class=3D"go">2 -1.557016 -0.636986 -1.238610</span>
<span class=3D"go">3 -0.407125 -1.002278  0.654052</span>
<span class=3D"go">4 -0.407125  0.033067  1.053999</span>
<span class=3D"go">5  0.651981  0.033067  0.238800</span>
<span class=3D"go">6  0.109001 -0.533294  0.238800</span>
<span class=3D"go">7 -1.037831 -1.150016  0.238800</span>
<span class=3D"go">8 -0.687693  1.921056 -0.121113</span>
<span class=3D"go">9 -0.258742 -0.706329  0.402547</span>
</pre></div>
</div>
</div>
<div class=3D"section" id=3D"dropping-axis-labels-with-missing-data-dropna"=
>
<span id=3D"missing-data-dropna"></span><h3>Dropping axis labels with missi=
ng data: dropna<a class=3D"headerlink" href=3D"https://pandas.pydata.org/pa=
ndas-docs/stable/missing_data.html#dropping-axis-labels-with-missing-data-d=
ropna" title=3D"Permalink to this headline">=C2=B6</a></h3>
<p>You may wish to simply exclude labels from a data set which refer to mis=
sing
data. To do this, use <a class=3D"reference internal" href=3D"https://panda=
s.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.dropna.html#pand=
as.DataFrame.dropna" title=3D"pandas.DataFrame.dropna"><code class=3D"xref =
py py-meth docutils literal notranslate"><span class=3D"pre">dropna()</span=
></code></a>:</p>
<div class=3D"highlight-ipython notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">In [56]: </span><span class=3D"n">df</span>
<span class=3D"gh">Out[56]: </span><span class=3D"go"></span>
<span class=3D"go">   one       two     three</span>
<span class=3D"go">a  NaN  0.501113 -0.355322</span>
<span class=3D"go">c  NaN  0.580967  0.983801</span>
<span class=3D"go">e  NaN  0.000000  0.000000</span>
<span class=3D"go">f  NaN  0.000000  0.000000</span>
<span class=3D"go">h  NaN -1.053898 -0.019369</span>

<span class=3D"gp">In [57]: </span><span class=3D"n">df</span><span class=
=3D"o">.</span><span class=3D"n">dropna</span><span class=3D"p">(</span><sp=
an class=3D"n">axis</span><span class=3D"o">=3D</span><span class=3D"mi">0<=
/span><span class=3D"p">)</span>
<span class=3D"go">Out[57]: </span>
<span class=3D"go">Empty DataFrame</span>
<span class=3D"go">Columns: [one, two, three]</span>
<span class=3D"go">Index: []</span>

<span class=3D"gp">In [58]: </span><span class=3D"n">df</span><span class=
=3D"o">.</span><span class=3D"n">dropna</span><span class=3D"p">(</span><sp=
an class=3D"n">axis</span><span class=3D"o">=3D</span><span class=3D"mi">1<=
/span><span class=3D"p">)</span>
<span class=3D"go">Out[58]: </span>
<span class=3D"go">        two     three</span>
<span class=3D"go">a  0.501113 -0.355322</span>
<span class=3D"go">c  0.580967  0.983801</span>
<span class=3D"go">e  0.000000  0.000000</span>
<span class=3D"go">f  0.000000  0.000000</span>
<span class=3D"go">h -1.053898 -0.019369</span>

<span class=3D"gp">In [59]: </span><span class=3D"n">df</span><span class=
=3D"p">[</span><span class=3D"s1">'one'</span><span class=3D"p">]</span><sp=
an class=3D"o">.</span><span class=3D"n">dropna</span><span class=3D"p">()<=
/span>
<span class=3D"go">Out[59]: Series([], Name: one, dtype: float64)</span>
</pre></div>
</div>
<p>An equivalent <a class=3D"reference internal" href=3D"https://pandas.pyd=
ata.org/pandas-docs/stable/generated/pandas.Series.dropna.html#pandas.Serie=
s.dropna" title=3D"pandas.Series.dropna"><code class=3D"xref py py-meth doc=
utils literal notranslate"><span class=3D"pre">dropna()</span></code></a> i=
s available for Series.
DataFrame.dropna has considerably more options than Series.dropna, which ca=
n be
examined <a class=3D"reference internal" href=3D"https://pandas.pydata.org/=
pandas-docs/stable/api.html#api-dataframe-missing"><span class=3D"std std-r=
ef">in the API</span></a>.</p>
</div>
<div class=3D"section" id=3D"interpolation">
<span id=3D"missing-data-interpolate"></span><h3>Interpolation<a class=3D"h=
eaderlink" href=3D"https://pandas.pydata.org/pandas-docs/stable/missing_dat=
a.html#interpolation" title=3D"Permalink to this headline">=C2=B6</a></h3>
<div class=3D"versionadded">
<p><span class=3D"versionmodified">New in version 0.21.0: </span>The <code =
class=3D"docutils literal notranslate"><span class=3D"pre">limit_area</span=
></code> keyword argument was added.</p>
</div>
<p>Both Series and DataFrame objects have <a class=3D"reference internal" h=
ref=3D"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFr=
ame.interpolate.html#pandas.DataFrame.interpolate" title=3D"pandas.DataFram=
e.interpolate"><code class=3D"xref py py-meth docutils literal notranslate"=
><span class=3D"pre">interpolate()</span></code></a>
that, by default, performs linear interpolation at missing datapoints.</p>
<div class=3D"highlight-ipython notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">In [60]: </span><span class=3D"n">ts</span>
<span class=3D"gh">Out[60]: </span><span class=3D"go"></span>
<span class=3D"go">2000-01-31    0.469112</span>
<span class=3D"go">2000-02-29         NaN</span>
<span class=3D"go">2000-03-31         NaN</span>
<span class=3D"go">2000-04-28         NaN</span>
<span class=3D"go">2000-05-31         NaN</span>
<span class=3D"go">2000-06-30         NaN</span>
<span class=3D"go">2000-07-31         NaN</span>
<span class=3D"go">                ...   </span>
<span class=3D"go">2007-10-31   -3.305259</span>
<span class=3D"go">2007-11-30   -5.485119</span>
<span class=3D"go">2007-12-31   -6.854968</span>
<span class=3D"go">2008-01-31   -7.809176</span>
<span class=3D"go">2008-02-29   -6.346480</span>
<span class=3D"go">2008-03-31   -8.089641</span>
<span class=3D"go">2008-04-30   -8.916232</span>
<span class=3D"go">Freq: BM, Length: 100, dtype: float64</span>

<span class=3D"gp">In [61]: </span><span class=3D"n">ts</span><span class=
=3D"o">.</span><span class=3D"n">count</span><span class=3D"p">()</span>
<span class=3D"go">Out[61]: 61</span>

<span class=3D"gp">In [62]: </span><span class=3D"n">ts</span><span class=
=3D"o">.</span><span class=3D"n">interpolate</span><span class=3D"p">()</sp=
an><span class=3D"o">.</span><span class=3D"n">count</span><span class=3D"p=
">()</span>
<span class=3D"go">Out[62]: 100</span>

<span class=3D"gp">In [63]: </span><span class=3D"n">ts</span><span class=
=3D"o">.</span><span class=3D"n">interpolate</span><span class=3D"p">()</sp=
an><span class=3D"o">.</span><span class=3D"n">plot</span><span class=3D"p"=
>()</span>
<span class=3D"go">Out[63]: &lt;matplotlib.axes._subplots.AxesSubplot at 0x=
7f20cf59ca58&gt;</span>
</pre></div>
</div>
<img alt=3D"_images/series_interpolate.png" src=3D"https://pandas.pydata.or=
g/pandas-docs/stable/_images/series_interpolate.png">
<p>Index aware interpolation is available via the <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">method</span></code> keyword:</p>
<div class=3D"highlight-ipython notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">In [64]: </span><span class=3D"n">ts2</span=
>
<span class=3D"gh">Out[64]: </span><span class=3D"go"></span>
<span class=3D"go">2000-01-31    0.469112</span>
<span class=3D"go">2000-02-29         NaN</span>
<span class=3D"go">2002-07-31   -5.689738</span>
<span class=3D"go">2005-01-31         NaN</span>
<span class=3D"go">2008-04-30   -8.916232</span>
<span class=3D"go">dtype: float64</span>

<span class=3D"gp">In [65]: </span><span class=3D"n">ts2</span><span class=
=3D"o">.</span><span class=3D"n">interpolate</span><span class=3D"p">()</sp=
an>
<span class=3D"go">Out[65]: </span>
<span class=3D"go">2000-01-31    0.469112</span>
<span class=3D"go">2000-02-29   -2.610313</span>
<span class=3D"go">2002-07-31   -5.689738</span>
<span class=3D"go">2005-01-31   -7.302985</span>
<span class=3D"go">2008-04-30   -8.916232</span>
<span class=3D"go">dtype: float64</span>

<span class=3D"gp">In [66]: </span><span class=3D"n">ts2</span><span class=
=3D"o">.</span><span class=3D"n">interpolate</span><span class=3D"p">(</spa=
n><span class=3D"n">method</span><span class=3D"o">=3D</span><span class=3D=
"s1">'time'</span><span class=3D"p">)</span>
<span class=3D"go">Out[66]: </span>
<span class=3D"go">2000-01-31    0.469112</span>
<span class=3D"go">2000-02-29    0.273272</span>
<span class=3D"go">2002-07-31   -5.689738</span>
<span class=3D"go">2005-01-31   -7.095568</span>
<span class=3D"go">2008-04-30   -8.916232</span>
<span class=3D"go">dtype: float64</span>
</pre></div>
</div>
<p>For a floating-point index, use <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">method=3D'values'</span></code>:</p>
<div class=3D"highlight-ipython notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">In [67]: </span><span class=3D"n">ser</span=
>
<span class=3D"gh">Out[67]: </span><span class=3D"go"></span>
<span class=3D"go">0.0      0.0</span>
<span class=3D"go">1.0      NaN</span>
<span class=3D"go">10.0    10.0</span>
<span class=3D"go">dtype: float64</span>

<span class=3D"gp">In [68]: </span><span class=3D"n">ser</span><span class=
=3D"o">.</span><span class=3D"n">interpolate</span><span class=3D"p">()</sp=
an>
<span class=3D"go">Out[68]: </span>
<span class=3D"go">0.0      0.0</span>
<span class=3D"go">1.0      5.0</span>
<span class=3D"go">10.0    10.0</span>
<span class=3D"go">dtype: float64</span>

<span class=3D"gp">In [69]: </span><span class=3D"n">ser</span><span class=
=3D"o">.</span><span class=3D"n">interpolate</span><span class=3D"p">(</spa=
n><span class=3D"n">method</span><span class=3D"o">=3D</span><span class=3D=
"s1">'values'</span><span class=3D"p">)</span>
<span class=3D"go">Out[69]: </span>
<span class=3D"go">0.0      0.0</span>
<span class=3D"go">1.0      1.0</span>
<span class=3D"go">10.0    10.0</span>
<span class=3D"go">dtype: float64</span>
</pre></div>
</div>
<p>You can also interpolate with a DataFrame:</p>
<div class=3D"highlight-ipython notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">In [70]: </span><span class=3D"n">df</span>=
 <span class=3D"o">=3D</span> <span class=3D"n">pd</span><span class=3D"o">=
.</span><span class=3D"n">DataFrame</span><span class=3D"p">({</span><span =
class=3D"s1">'A'</span><span class=3D"p">:</span> <span class=3D"p">[</span=
><span class=3D"mi">1</span><span class=3D"p">,</span> <span class=3D"mf">2=
.1</span><span class=3D"p">,</span> <span class=3D"n">np</span><span class=
=3D"o">.</span><span class=3D"n">nan</span><span class=3D"p">,</span> <span=
 class=3D"mf">4.7</span><span class=3D"p">,</span> <span class=3D"mf">5.6</=
span><span class=3D"p">,</span> <span class=3D"mf">6.8</span><span class=3D=
"p">],</span>
<span class=3D"gp">   ....: </span>                   <span class=3D"s1">'B=
'</span><span class=3D"p">:</span> <span class=3D"p">[</span><span class=3D=
"o">.</span><span class=3D"mi">25</span><span class=3D"p">,</span> <span cl=
ass=3D"n">np</span><span class=3D"o">.</span><span class=3D"n">nan</span><s=
pan class=3D"p">,</span> <span class=3D"n">np</span><span class=3D"o">.</sp=
an><span class=3D"n">nan</span><span class=3D"p">,</span> <span class=3D"mi=
">4</span><span class=3D"p">,</span> <span class=3D"mf">12.2</span><span cl=
ass=3D"p">,</span> <span class=3D"mf">14.4</span><span class=3D"p">]})</spa=
n>
<span class=3D"gp">   ....: </span>

<span class=3D"gp">In [71]: </span><span class=3D"n">df</span>
<span class=3D"gh">Out[71]: </span><span class=3D"go"></span>
<span class=3D"go">     A      B</span>
<span class=3D"go">0  1.0   0.25</span>
<span class=3D"go">1  2.1    NaN</span>
<span class=3D"go">2  NaN    NaN</span>
<span class=3D"go">3  4.7   4.00</span>
<span class=3D"go">4  5.6  12.20</span>
<span class=3D"go">5  6.8  14.40</span>

<span class=3D"gp">In [72]: </span><span class=3D"n">df</span><span class=
=3D"o">.</span><span class=3D"n">interpolate</span><span class=3D"p">()</sp=
an>
<span class=3D"go">Out[72]: </span>
<span class=3D"go">     A      B</span>
<span class=3D"go">0  1.0   0.25</span>
<span class=3D"go">1  2.1   1.50</span>
<span class=3D"go">2  3.4   2.75</span>
<span class=3D"go">3  4.7   4.00</span>
<span class=3D"go">4  5.6  12.20</span>
<span class=3D"go">5  6.8  14.40</span>
</pre></div>
</div>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">met=
hod</span></code> argument gives access to fancier interpolation methods.
If you have <a class=3D"reference external" href=3D"http://www.scipy.org/">=
scipy</a> installed, you can pass the name of a 1-d interpolation routine t=
o <code class=3D"docutils literal notranslate"><span class=3D"pre">method</=
span></code>.
You=E2=80=99ll want to consult the full scipy interpolation <a class=3D"ref=
erence external" href=3D"http://docs.scipy.org/doc/scipy/reference/interpol=
ate.html#univariate-interpolation">documentation</a> and reference <a class=
=3D"reference external" href=3D"http://docs.scipy.org/doc/scipy/reference/t=
utorial/interpolate.html">guide</a> for details.
The appropriate interpolation method will depend on the type of data you ar=
e working with.</p>
<ul class=3D"simple">
<li>If you are dealing with a time series that is growing at an increasing =
rate,
<code class=3D"docutils literal notranslate"><span class=3D"pre">method=3D'=
quadratic'</span></code> may be appropriate.</li>
<li>If you have values approximating a cumulative distribution function,
then <code class=3D"docutils literal notranslate"><span class=3D"pre">metho=
d=3D'pchip'</span></code> should work well.</li>
<li>To fill missing values with goal of smooth plotting, consider <code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">method=3D'akima'</s=
pan></code>.</li>
</ul>
<div class=3D"admonition warning">
<p class=3D"first admonition-title">Warning</p>
<p class=3D"last">These methods require <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">scipy</span></code>.</p>
</div>
<div class=3D"highlight-ipython notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">In [73]: </span><span class=3D"n">df</span>=
<span class=3D"o">.</span><span class=3D"n">interpolate</span><span class=
=3D"p">(</span><span class=3D"n">method</span><span class=3D"o">=3D</span><=
span class=3D"s1">'barycentric'</span><span class=3D"p">)</span>
<span class=3D"gh">Out[73]: </span><span class=3D"go"></span>
<span class=3D"go">      A       B</span>
<span class=3D"go">0  1.00   0.250</span>
<span class=3D"go">1  2.10  -7.660</span>
<span class=3D"go">2  3.53  -4.515</span>
<span class=3D"go">3  4.70   4.000</span>
<span class=3D"go">4  5.60  12.200</span>
<span class=3D"go">5  6.80  14.400</span>

<span class=3D"gp">In [74]: </span><span class=3D"n">df</span><span class=
=3D"o">.</span><span class=3D"n">interpolate</span><span class=3D"p">(</spa=
n><span class=3D"n">method</span><span class=3D"o">=3D</span><span class=3D=
"s1">'pchip'</span><span class=3D"p">)</span>
<span class=3D"go">Out[74]: </span>
<span class=3D"go">         A          B</span>
<span class=3D"go">0  1.00000   0.250000</span>
<span class=3D"go">1  2.10000   0.672808</span>
<span class=3D"go">2  3.43454   1.928950</span>
<span class=3D"go">3  4.70000   4.000000</span>
<span class=3D"go">4  5.60000  12.200000</span>
<span class=3D"go">5  6.80000  14.400000</span>

<span class=3D"gp">In [75]: </span><span class=3D"n">df</span><span class=
=3D"o">.</span><span class=3D"n">interpolate</span><span class=3D"p">(</spa=
n><span class=3D"n">method</span><span class=3D"o">=3D</span><span class=3D=
"s1">'akima'</span><span class=3D"p">)</span>
<span class=3D"go">Out[75]: </span>
<span class=3D"go">          A          B</span>
<span class=3D"go">0  1.000000   0.250000</span>
<span class=3D"go">1  2.100000  -0.873316</span>
<span class=3D"go">2  3.406667   0.320034</span>
<span class=3D"go">3  4.700000   4.000000</span>
<span class=3D"go">4  5.600000  12.200000</span>
<span class=3D"go">5  6.800000  14.400000</span>
</pre></div>
</div>
<p>When interpolating via a polynomial or spline approximation, you must al=
so specify
the degree or order of the approximation:</p>
<div class=3D"highlight-ipython notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">In [76]: </span><span class=3D"n">df</span>=
<span class=3D"o">.</span><span class=3D"n">interpolate</span><span class=
=3D"p">(</span><span class=3D"n">method</span><span class=3D"o">=3D</span><=
span class=3D"s1">'spline'</span><span class=3D"p">,</span> <span class=3D"=
n">order</span><span class=3D"o">=3D</span><span class=3D"mi">2</span><span=
 class=3D"p">)</span>
<span class=3D"gh">Out[76]: </span><span class=3D"go"></span>
<span class=3D"go">          A          B</span>
<span class=3D"go">0  1.000000   0.250000</span>
<span class=3D"go">1  2.100000  -0.428598</span>
<span class=3D"go">2  3.404545   1.206900</span>
<span class=3D"go">3  4.700000   4.000000</span>
<span class=3D"go">4  5.600000  12.200000</span>
<span class=3D"go">5  6.800000  14.400000</span>

<span class=3D"gp">In [77]: </span><span class=3D"n">df</span><span class=
=3D"o">.</span><span class=3D"n">interpolate</span><span class=3D"p">(</spa=
n><span class=3D"n">method</span><span class=3D"o">=3D</span><span class=3D=
"s1">'polynomial'</span><span class=3D"p">,</span> <span class=3D"n">order<=
/span><span class=3D"o">=3D</span><span class=3D"mi">2</span><span class=3D=
"p">)</span>
<span class=3D"go">Out[77]: </span>
<span class=3D"go">          A          B</span>
<span class=3D"go">0  1.000000   0.250000</span>
<span class=3D"go">1  2.100000  -2.703846</span>
<span class=3D"go">2  3.451351  -1.453846</span>
<span class=3D"go">3  4.700000   4.000000</span>
<span class=3D"go">4  5.600000  12.200000</span>
<span class=3D"go">5  6.800000  14.400000</span>
</pre></div>
</div>
<p>Compare several methods:</p>
<div class=3D"highlight-ipython notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">In [78]: </span><span class=3D"n">np</span>=
<span class=3D"o">.</span><span class=3D"n">random</span><span class=3D"o">=
.</span><span class=3D"n">seed</span><span class=3D"p">(</span><span class=
=3D"mi">2</span><span class=3D"p">)</span>

<span class=3D"gp">In [79]: </span><span class=3D"n">ser</span> <span class=
=3D"o">=3D</span> <span class=3D"n">pd</span><span class=3D"o">.</span><spa=
n class=3D"n">Series</span><span class=3D"p">(</span><span class=3D"n">np</=
span><span class=3D"o">.</span><span class=3D"n">arange</span><span class=
=3D"p">(</span><span class=3D"mi">1</span><span class=3D"p">,</span> <span =
class=3D"mf">10.1</span><span class=3D"p">,</span> <span class=3D"o">.</spa=
n><span class=3D"mi">25</span><span class=3D"p">)</span><span class=3D"o">*=
*</span><span class=3D"mi">2</span> <span class=3D"o">+</span> <span class=
=3D"n">np</span><span class=3D"o">.</span><span class=3D"n">random</span><s=
pan class=3D"o">.</span><span class=3D"n">randn</span><span class=3D"p">(</=
span><span class=3D"mi">37</span><span class=3D"p">))</span>

<span class=3D"gp">In [80]: </span><span class=3D"n">bad</span> <span class=
=3D"o">=3D</span> <span class=3D"n">np</span><span class=3D"o">.</span><spa=
n class=3D"n">array</span><span class=3D"p">([</span><span class=3D"mi">4</=
span><span class=3D"p">,</span> <span class=3D"mi">13</span><span class=3D"=
p">,</span> <span class=3D"mi">14</span><span class=3D"p">,</span> <span cl=
ass=3D"mi">15</span><span class=3D"p">,</span> <span class=3D"mi">16</span>=
<span class=3D"p">,</span> <span class=3D"mi">17</span><span class=3D"p">,<=
/span> <span class=3D"mi">18</span><span class=3D"p">,</span> <span class=
=3D"mi">20</span><span class=3D"p">,</span> <span class=3D"mi">29</span><sp=
an class=3D"p">])</span>

<span class=3D"gp">In [81]: </span><span class=3D"n">ser</span><span class=
=3D"p">[</span><span class=3D"n">bad</span><span class=3D"p">]</span> <span=
 class=3D"o">=3D</span> <span class=3D"n">np</span><span class=3D"o">.</spa=
n><span class=3D"n">nan</span>

<span class=3D"gp">In [82]: </span><span class=3D"n">methods</span> <span c=
lass=3D"o">=3D</span> <span class=3D"p">[</span><span class=3D"s1">'linear'=
</span><span class=3D"p">,</span> <span class=3D"s1">'quadratic'</span><spa=
n class=3D"p">,</span> <span class=3D"s1">'cubic'</span><span class=3D"p">]=
</span>

<span class=3D"gp">In [83]: </span><span class=3D"n">df</span> <span class=
=3D"o">=3D</span> <span class=3D"n">pd</span><span class=3D"o">.</span><spa=
n class=3D"n">DataFrame</span><span class=3D"p">({</span><span class=3D"n">=
m</span><span class=3D"p">:</span> <span class=3D"n">ser</span><span class=
=3D"o">.</span><span class=3D"n">interpolate</span><span class=3D"p">(</spa=
n><span class=3D"n">method</span><span class=3D"o">=3D</span><span class=3D=
"n">m</span><span class=3D"p">)</span> <span class=3D"k">for</span> <span c=
lass=3D"n">m</span> <span class=3D"ow">in</span> <span class=3D"n">methods<=
/span><span class=3D"p">})</span>

<span class=3D"gp">In [84]: </span><span class=3D"n">df</span><span class=
=3D"o">.</span><span class=3D"n">plot</span><span class=3D"p">()</span>
<span class=3D"gh">Out[84]: </span><span class=3D"go">&lt;matplotlib.axes._=
subplots.AxesSubplot at 0x7f20cf573fd0&gt;</span>
</pre></div>
</div>
<img alt=3D"_images/compare_interpolations.png" src=3D"https://pandas.pydat=
a.org/pandas-docs/stable/_images/compare_interpolations.png">
<p>Another use case is interpolation at <em>new</em> values.
Suppose you have 100 observations from some distribution. And let=E2=80=99s=
 suppose
that you=E2=80=99re particularly interested in what=E2=80=99s happening aro=
und the middle.
You can mix pandas=E2=80=99 <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">reindex</span></code> and <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">interpolate</span></code> methods to inte=
rpolate
at the new values.</p>
<div class=3D"highlight-ipython notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">In [85]: </span><span class=3D"n">ser</span=
> <span class=3D"o">=3D</span> <span class=3D"n">pd</span><span class=3D"o"=
>.</span><span class=3D"n">Series</span><span class=3D"p">(</span><span cla=
ss=3D"n">np</span><span class=3D"o">.</span><span class=3D"n">sort</span><s=
pan class=3D"p">(</span><span class=3D"n">np</span><span class=3D"o">.</spa=
n><span class=3D"n">random</span><span class=3D"o">.</span><span class=3D"n=
">uniform</span><span class=3D"p">(</span><span class=3D"n">size</span><spa=
n class=3D"o">=3D</span><span class=3D"mi">100</span><span class=3D"p">)))<=
/span>

<span class=3D"go"># interpolate at new_index</span>
<span class=3D"gp">In [86]: </span><span class=3D"n">new_index</span> <span=
 class=3D"o">=3D</span> <span class=3D"n">ser</span><span class=3D"o">.</sp=
an><span class=3D"n">index</span> <span class=3D"o">|</span> <span class=3D=
"n">pd</span><span class=3D"o">.</span><span class=3D"n">Index</span><span =
class=3D"p">([</span><span class=3D"mf">49.25</span><span class=3D"p">,</sp=
an> <span class=3D"mf">49.5</span><span class=3D"p">,</span> <span class=3D=
"mf">49.75</span><span class=3D"p">,</span> <span class=3D"mf">50.25</span>=
<span class=3D"p">,</span> <span class=3D"mf">50.5</span><span class=3D"p">=
,</span> <span class=3D"mf">50.75</span><span class=3D"p">])</span>

<span class=3D"gp">In [87]: </span><span class=3D"n">interp_s</span> <span =
class=3D"o">=3D</span> <span class=3D"n">ser</span><span class=3D"o">.</spa=
n><span class=3D"n">reindex</span><span class=3D"p">(</span><span class=3D"=
n">new_index</span><span class=3D"p">)</span><span class=3D"o">.</span><spa=
n class=3D"n">interpolate</span><span class=3D"p">(</span><span class=3D"n"=
>method</span><span class=3D"o">=3D</span><span class=3D"s1">'pchip'</span>=
<span class=3D"p">)</span>

<span class=3D"gp">In [88]: </span><span class=3D"n">interp_s</span><span c=
lass=3D"p">[</span><span class=3D"mi">49</span><span class=3D"p">:</span><s=
pan class=3D"mi">51</span><span class=3D"p">]</span>
<span class=3D"gh">Out[88]: </span><span class=3D"go"></span>
<span class=3D"go">49.00    0.471410</span>
<span class=3D"go">49.25    0.476841</span>
<span class=3D"go">49.50    0.481780</span>
<span class=3D"go">49.75    0.485998</span>
<span class=3D"go">50.00    0.489266</span>
<span class=3D"go">50.25    0.491814</span>
<span class=3D"go">50.50    0.493995</span>
<span class=3D"go">50.75    0.495763</span>
<span class=3D"go">51.00    0.497074</span>
<span class=3D"go">dtype: float64</span>
</pre></div>
</div>
<div class=3D"section" id=3D"interpolation-limits">
<span id=3D"missing-data-interp-limits"></span><h4>Interpolation Limits<a c=
lass=3D"headerlink" href=3D"https://pandas.pydata.org/pandas-docs/stable/mi=
ssing_data.html#interpolation-limits" title=3D"Permalink to this headline">=
=C2=B6</a></h4>
<p>Like other pandas fill methods, <a class=3D"reference internal" href=3D"=
https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.int=
erpolate.html#pandas.DataFrame.interpolate" title=3D"pandas.DataFrame.inter=
polate"><code class=3D"xref py py-meth docutils literal notranslate"><span =
class=3D"pre">interpolate()</span></code></a> accepts a <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">limit</span></code> keyword
argument. Use this argument to limit the number of consecutive <code class=
=3D"docutils literal notranslate"><span class=3D"pre">NaN</span></code> val=
ues
filled since the last valid observation:</p>
<div class=3D"highlight-ipython notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">In [89]: </span><span class=3D"n">ser</span=
> <span class=3D"o">=3D</span> <span class=3D"n">pd</span><span class=3D"o"=
>.</span><span class=3D"n">Series</span><span class=3D"p">([</span><span cl=
ass=3D"n">np</span><span class=3D"o">.</span><span class=3D"n">nan</span><s=
pan class=3D"p">,</span> <span class=3D"n">np</span><span class=3D"o">.</sp=
an><span class=3D"n">nan</span><span class=3D"p">,</span> <span class=3D"mi=
">5</span><span class=3D"p">,</span> <span class=3D"n">np</span><span class=
=3D"o">.</span><span class=3D"n">nan</span><span class=3D"p">,</span> <span=
 class=3D"n">np</span><span class=3D"o">.</span><span class=3D"n">nan</span=
><span class=3D"p">,</span> <span class=3D"n">np</span><span class=3D"o">.<=
/span><span class=3D"n">nan</span><span class=3D"p">,</span> <span class=3D=
"mi">13</span><span class=3D"p">,</span> <span class=3D"n">np</span><span c=
lass=3D"o">.</span><span class=3D"n">nan</span><span class=3D"p">,</span> <=
span class=3D"n">np</span><span class=3D"o">.</span><span class=3D"n">nan</=
span><span class=3D"p">])</span>

<span class=3D"go"># fill all consecutive values in a forward direction</sp=
an>
<span class=3D"gp">In [90]: </span><span class=3D"n">ser</span><span class=
=3D"o">.</span><span class=3D"n">interpolate</span><span class=3D"p">()</sp=
an>
<span class=3D"gh">Out[90]: </span><span class=3D"go"></span>
<span class=3D"go">0     NaN</span>
<span class=3D"go">1     NaN</span>
<span class=3D"go">2     5.0</span>
<span class=3D"go">3     7.0</span>
<span class=3D"go">4     9.0</span>
<span class=3D"go">5    11.0</span>
<span class=3D"go">6    13.0</span>
<span class=3D"go">7    13.0</span>
<span class=3D"go">8    13.0</span>
<span class=3D"go">dtype: float64</span>

<span class=3D"go"># fill one consecutive value in a forward direction</spa=
n>
<span class=3D"gp">In [91]: </span><span class=3D"n">ser</span><span class=
=3D"o">.</span><span class=3D"n">interpolate</span><span class=3D"p">(</spa=
n><span class=3D"n">limit</span><span class=3D"o">=3D</span><span class=3D"=
mi">1</span><span class=3D"p">)</span>
<span class=3D"go">Out[91]: </span>
<span class=3D"go">0     NaN</span>
<span class=3D"go">1     NaN</span>
<span class=3D"go">2     5.0</span>
<span class=3D"go">3     7.0</span>
<span class=3D"go">4     NaN</span>
<span class=3D"go">5     NaN</span>
<span class=3D"go">6    13.0</span>
<span class=3D"go">7    13.0</span>
<span class=3D"go">8     NaN</span>
<span class=3D"go">dtype: float64</span>
</pre></div>
</div>
<p>By default, <code class=3D"docutils literal notranslate"><span class=3D"=
pre">NaN</span></code> values are filled in a <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">forward</span></code> direction. Use
<code class=3D"docutils literal notranslate"><span class=3D"pre">limit_dire=
ction</span></code> parameter to fill <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">backward</span></code> or from <code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">both</span></code> directi=
ons.</p>
<div class=3D"highlight-ipython notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"go"># fill one consecutive value backwards</spa=
n>
<span class=3D"gp">In [92]: </span><span class=3D"n">ser</span><span class=
=3D"o">.</span><span class=3D"n">interpolate</span><span class=3D"p">(</spa=
n><span class=3D"n">limit</span><span class=3D"o">=3D</span><span class=3D"=
mi">1</span><span class=3D"p">,</span> <span class=3D"n">limit_direction</s=
pan><span class=3D"o">=3D</span><span class=3D"s1">'backward'</span><span c=
lass=3D"p">)</span>
<span class=3D"gh">Out[92]: </span><span class=3D"go"></span>
<span class=3D"go">0     NaN</span>
<span class=3D"go">1     5.0</span>
<span class=3D"go">2     5.0</span>
<span class=3D"go">3     NaN</span>
<span class=3D"go">4     NaN</span>
<span class=3D"go">5    11.0</span>
<span class=3D"go">6    13.0</span>
<span class=3D"go">7     NaN</span>
<span class=3D"go">8     NaN</span>
<span class=3D"go">dtype: float64</span>

<span class=3D"go"># fill one consecutive value in both directions</span>
<span class=3D"gp">In [93]: </span><span class=3D"n">ser</span><span class=
=3D"o">.</span><span class=3D"n">interpolate</span><span class=3D"p">(</spa=
n><span class=3D"n">limit</span><span class=3D"o">=3D</span><span class=3D"=
mi">1</span><span class=3D"p">,</span> <span class=3D"n">limit_direction</s=
pan><span class=3D"o">=3D</span><span class=3D"s1">'both'</span><span class=
=3D"p">)</span>
<span class=3D"go">Out[93]: </span>
<span class=3D"go">0     NaN</span>
<span class=3D"go">1     5.0</span>
<span class=3D"go">2     5.0</span>
<span class=3D"go">3     7.0</span>
<span class=3D"go">4     NaN</span>
<span class=3D"go">5    11.0</span>
<span class=3D"go">6    13.0</span>
<span class=3D"go">7    13.0</span>
<span class=3D"go">8     NaN</span>
<span class=3D"go">dtype: float64</span>

<span class=3D"go"># fill all consecutive values in both directions</span>
<span class=3D"gp">In [94]: </span><span class=3D"n">ser</span><span class=
=3D"o">.</span><span class=3D"n">interpolate</span><span class=3D"p">(</spa=
n><span class=3D"n">limit_direction</span><span class=3D"o">=3D</span><span=
 class=3D"s1">'both'</span><span class=3D"p">)</span>
<span class=3D"go">Out[94]: </span>
<span class=3D"go">0     5.0</span>
<span class=3D"go">1     5.0</span>
<span class=3D"go">2     5.0</span>
<span class=3D"go">3     7.0</span>
<span class=3D"go">4     9.0</span>
<span class=3D"go">5    11.0</span>
<span class=3D"go">6    13.0</span>
<span class=3D"go">7    13.0</span>
<span class=3D"go">8    13.0</span>
<span class=3D"go">dtype: float64</span>
</pre></div>
</div>
<p>By default, <code class=3D"docutils literal notranslate"><span class=3D"=
pre">NaN</span></code> values are filled whether they are inside (surrounde=
d by)
existing valid values, or outside existing valid values. Introduced in v0.2=
3
the <code class=3D"docutils literal notranslate"><span class=3D"pre">limit_=
area</span></code> parameter restricts filling to either inside or outside =
values.</p>
<div class=3D"highlight-ipython notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"go"># fill one consecutive inside value in both=
 directions</span>
<span class=3D"gp">In [95]: </span><span class=3D"n">ser</span><span class=
=3D"o">.</span><span class=3D"n">interpolate</span><span class=3D"p">(</spa=
n><span class=3D"n">limit_direction</span><span class=3D"o">=3D</span><span=
 class=3D"s1">'both'</span><span class=3D"p">,</span> <span class=3D"n">lim=
it_area</span><span class=3D"o">=3D</span><span class=3D"s1">'inside'</span=
><span class=3D"p">,</span> <span class=3D"n">limit</span><span class=3D"o"=
>=3D</span><span class=3D"mi">1</span><span class=3D"p">)</span>
<span class=3D"gh">Out[95]: </span><span class=3D"go"></span>
<span class=3D"go">0     NaN</span>
<span class=3D"go">1     NaN</span>
<span class=3D"go">2     5.0</span>
<span class=3D"go">3     7.0</span>
<span class=3D"go">4     NaN</span>
<span class=3D"go">5    11.0</span>
<span class=3D"go">6    13.0</span>
<span class=3D"go">7     NaN</span>
<span class=3D"go">8     NaN</span>
<span class=3D"go">dtype: float64</span>

<span class=3D"go"># fill all consecutive outside values backward</span>
<span class=3D"gp">In [96]: </span><span class=3D"n">ser</span><span class=
=3D"o">.</span><span class=3D"n">interpolate</span><span class=3D"p">(</spa=
n><span class=3D"n">limit_direction</span><span class=3D"o">=3D</span><span=
 class=3D"s1">'backward'</span><span class=3D"p">,</span> <span class=3D"n"=
>limit_area</span><span class=3D"o">=3D</span><span class=3D"s1">'outside'<=
/span><span class=3D"p">)</span>
<span class=3D"go">Out[96]: </span>
<span class=3D"go">0     5.0</span>
<span class=3D"go">1     5.0</span>
<span class=3D"go">2     5.0</span>
<span class=3D"go">3     NaN</span>
<span class=3D"go">4     NaN</span>
<span class=3D"go">5     NaN</span>
<span class=3D"go">6    13.0</span>
<span class=3D"go">7     NaN</span>
<span class=3D"go">8     NaN</span>
<span class=3D"go">dtype: float64</span>

<span class=3D"go"># fill all consecutive outside values in both directions=
</span>
<span class=3D"gp">In [97]: </span><span class=3D"n">ser</span><span class=
=3D"o">.</span><span class=3D"n">interpolate</span><span class=3D"p">(</spa=
n><span class=3D"n">limit_direction</span><span class=3D"o">=3D</span><span=
 class=3D"s1">'both'</span><span class=3D"p">,</span> <span class=3D"n">lim=
it_area</span><span class=3D"o">=3D</span><span class=3D"s1">'outside'</spa=
n><span class=3D"p">)</span>
<span class=3D"go">Out[97]: </span>
<span class=3D"go">0     5.0</span>
<span class=3D"go">1     5.0</span>
<span class=3D"go">2     5.0</span>
<span class=3D"go">3     NaN</span>
<span class=3D"go">4     NaN</span>
<span class=3D"go">5     NaN</span>
<span class=3D"go">6    13.0</span>
<span class=3D"go">7    13.0</span>
<span class=3D"go">8    13.0</span>
<span class=3D"go">dtype: float64</span>
</pre></div>
</div>
</div>
</div>
<div class=3D"section" id=3D"replacing-generic-values">
<span id=3D"missing-data-replace"></span><h3>Replacing Generic Values<a cla=
ss=3D"headerlink" href=3D"https://pandas.pydata.org/pandas-docs/stable/miss=
ing_data.html#replacing-generic-values" title=3D"Permalink to this headline=
">=C2=B6</a></h3>
<p>Often times we want to replace arbitrary values with other values.</p>
<p><a class=3D"reference internal" href=3D"https://pandas.pydata.org/pandas=
-docs/stable/generated/pandas.Series.replace.html#pandas.Series.replace" ti=
tle=3D"pandas.Series.replace"><code class=3D"xref py py-meth docutils liter=
al notranslate"><span class=3D"pre">replace()</span></code></a> in Series a=
nd <a class=3D"reference internal" href=3D"https://pandas.pydata.org/pandas=
-docs/stable/generated/pandas.DataFrame.replace.html#pandas.DataFrame.repla=
ce" title=3D"pandas.DataFrame.replace"><code class=3D"xref py py-meth docut=
ils literal notranslate"><span class=3D"pre">replace()</span></code></a> in=
 DataFrame provides an efficient yet
flexible way to perform such replacements.</p>
<p>For a Series, you can replace a single value or a list of values by anot=
her
value:</p>
<div class=3D"highlight-ipython notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">In [98]: </span><span class=3D"n">ser</span=
> <span class=3D"o">=3D</span> <span class=3D"n">pd</span><span class=3D"o"=
>.</span><span class=3D"n">Series</span><span class=3D"p">([</span><span cl=
ass=3D"mf">0.</span><span class=3D"p">,</span> <span class=3D"mf">1.</span>=
<span class=3D"p">,</span> <span class=3D"mf">2.</span><span class=3D"p">,<=
/span> <span class=3D"mf">3.</span><span class=3D"p">,</span> <span class=
=3D"mf">4.</span><span class=3D"p">])</span>

<span class=3D"gp">In [99]: </span><span class=3D"n">ser</span><span class=
=3D"o">.</span><span class=3D"n">replace</span><span class=3D"p">(</span><s=
pan class=3D"mi">0</span><span class=3D"p">,</span> <span class=3D"mi">5</s=
pan><span class=3D"p">)</span>
<span class=3D"gh">Out[99]: </span><span class=3D"go"></span>
<span class=3D"go">0    5.0</span>
<span class=3D"go">1    1.0</span>
<span class=3D"go">2    2.0</span>
<span class=3D"go">3    3.0</span>
<span class=3D"go">4    4.0</span>
<span class=3D"go">dtype: float64</span>
</pre></div>
</div>
<p>You can replace a list of values by a list of other values:</p>
<div class=3D"highlight-ipython notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">In [100]: </span><span class=3D"n">ser</spa=
n><span class=3D"o">.</span><span class=3D"n">replace</span><span class=3D"=
p">([</span><span class=3D"mi">0</span><span class=3D"p">,</span> <span cla=
ss=3D"mi">1</span><span class=3D"p">,</span> <span class=3D"mi">2</span><sp=
an class=3D"p">,</span> <span class=3D"mi">3</span><span class=3D"p">,</spa=
n> <span class=3D"mi">4</span><span class=3D"p">],</span> <span class=3D"p"=
>[</span><span class=3D"mi">4</span><span class=3D"p">,</span> <span class=
=3D"mi">3</span><span class=3D"p">,</span> <span class=3D"mi">2</span><span=
 class=3D"p">,</span> <span class=3D"mi">1</span><span class=3D"p">,</span>=
 <span class=3D"mi">0</span><span class=3D"p">])</span>
<span class=3D"gh">Out[100]: </span><span class=3D"go"></span>
<span class=3D"go">0    4.0</span>
<span class=3D"go">1    3.0</span>
<span class=3D"go">2    2.0</span>
<span class=3D"go">3    1.0</span>
<span class=3D"go">4    0.0</span>
<span class=3D"go">dtype: float64</span>
</pre></div>
</div>
<p>You can also specify a mapping dict:</p>
<div class=3D"highlight-ipython notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">In [101]: </span><span class=3D"n">ser</spa=
n><span class=3D"o">.</span><span class=3D"n">replace</span><span class=3D"=
p">({</span><span class=3D"mi">0</span><span class=3D"p">:</span> <span cla=
ss=3D"mi">10</span><span class=3D"p">,</span> <span class=3D"mi">1</span><s=
pan class=3D"p">:</span> <span class=3D"mi">100</span><span class=3D"p">})<=
/span>
<span class=3D"gh">Out[101]: </span><span class=3D"go"></span>
<span class=3D"go">0     10.0</span>
<span class=3D"go">1    100.0</span>
<span class=3D"go">2      2.0</span>
<span class=3D"go">3      3.0</span>
<span class=3D"go">4      4.0</span>
<span class=3D"go">dtype: float64</span>
</pre></div>
</div>
<p>For a DataFrame, you can specify individual values by column:</p>
<div class=3D"highlight-ipython notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">In [102]: </span><span class=3D"n">df</span=
> <span class=3D"o">=3D</span> <span class=3D"n">pd</span><span class=3D"o"=
>.</span><span class=3D"n">DataFrame</span><span class=3D"p">({</span><span=
 class=3D"s1">'a'</span><span class=3D"p">:</span> <span class=3D"p">[</spa=
n><span class=3D"mi">0</span><span class=3D"p">,</span> <span class=3D"mi">=
1</span><span class=3D"p">,</span> <span class=3D"mi">2</span><span class=
=3D"p">,</span> <span class=3D"mi">3</span><span class=3D"p">,</span> <span=
 class=3D"mi">4</span><span class=3D"p">],</span> <span class=3D"s1">'b'</s=
pan><span class=3D"p">:</span> <span class=3D"p">[</span><span class=3D"mi"=
>5</span><span class=3D"p">,</span> <span class=3D"mi">6</span><span class=
=3D"p">,</span> <span class=3D"mi">7</span><span class=3D"p">,</span> <span=
 class=3D"mi">8</span><span class=3D"p">,</span> <span class=3D"mi">9</span=
><span class=3D"p">]})</span>

<span class=3D"gp">In [103]: </span><span class=3D"n">df</span><span class=
=3D"o">.</span><span class=3D"n">replace</span><span class=3D"p">({</span><=
span class=3D"s1">'a'</span><span class=3D"p">:</span> <span class=3D"mi">0=
</span><span class=3D"p">,</span> <span class=3D"s1">'b'</span><span class=
=3D"p">:</span> <span class=3D"mi">5</span><span class=3D"p">},</span> <spa=
n class=3D"mi">100</span><span class=3D"p">)</span>
<span class=3D"gh">Out[103]: </span><span class=3D"go"></span>
<span class=3D"go">     a    b</span>
<span class=3D"go">0  100  100</span>
<span class=3D"go">1    1    6</span>
<span class=3D"go">2    2    7</span>
<span class=3D"go">3    3    8</span>
<span class=3D"go">4    4    9</span>
</pre></div>
</div>
<p>Instead of replacing with specified values, you can treat all given valu=
es as
missing and interpolate over them:</p>
<div class=3D"highlight-ipython notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">In [104]: </span><span class=3D"n">ser</spa=
n><span class=3D"o">.</span><span class=3D"n">replace</span><span class=3D"=
p">([</span><span class=3D"mi">1</span><span class=3D"p">,</span> <span cla=
ss=3D"mi">2</span><span class=3D"p">,</span> <span class=3D"mi">3</span><sp=
an class=3D"p">],</span> <span class=3D"n">method</span><span class=3D"o">=
=3D</span><span class=3D"s1">'pad'</span><span class=3D"p">)</span>
<span class=3D"gh">Out[104]: </span><span class=3D"go"></span>
<span class=3D"go">0    0.0</span>
<span class=3D"go">1    0.0</span>
<span class=3D"go">2    0.0</span>
<span class=3D"go">3    0.0</span>
<span class=3D"go">4    4.0</span>
<span class=3D"go">dtype: float64</span>
</pre></div>
</div>
</div>
<div class=3D"section" id=3D"string-regular-expression-replacement">
<span id=3D"missing-data-replace-expression"></span><h3>String/Regular Expr=
ession Replacement<a class=3D"headerlink" href=3D"https://pandas.pydata.org=
/pandas-docs/stable/missing_data.html#string-regular-expression-replacement=
" title=3D"Permalink to this headline">=C2=B6</a></h3>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Python strings prefixed with the <code class=3D"docutils =
literal notranslate"><span class=3D"pre">r</span></code> character such as =
<code class=3D"docutils literal notranslate"><span class=3D"pre">r'hello</s=
pan> <span class=3D"pre">world'</span></code>
are so-called =E2=80=9Craw=E2=80=9D strings. They have different semantics =
regarding
backslashes than strings without this prefix. Backslashes in raw strings
will be interpreted as an escaped backslash, e.g., <code class=3D"docutils =
literal notranslate"><span class=3D"pre">r'\'</span> <span class=3D"pre">=
=3D=3D</span> <span class=3D"pre">'\\'</span></code>. You
should <a class=3D"reference external" href=3D"https://docs.python.org/3/re=
ference/lexical_analysis.html#string-literals">read about them</a>
if this is unclear.</p>
</div>
<p>Replace the =E2=80=98.=E2=80=99 with <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">NaN</span></code> (str -&gt; str):</p>
<div class=3D"highlight-ipython notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">In [105]: </span><span class=3D"n">d</span>=
 <span class=3D"o">=3D</span> <span class=3D"p">{</span><span class=3D"s1">=
'a'</span><span class=3D"p">:</span> <span class=3D"nb">list</span><span cl=
ass=3D"p">(</span><span class=3D"nb">range</span><span class=3D"p">(</span>=
<span class=3D"mi">4</span><span class=3D"p">)),</span> <span class=3D"s1">=
'b'</span><span class=3D"p">:</span> <span class=3D"nb">list</span><span cl=
ass=3D"p">(</span><span class=3D"s1">'ab..'</span><span class=3D"p">),</spa=
n> <span class=3D"s1">'c'</span><span class=3D"p">:</span> <span class=3D"p=
">[</span><span class=3D"s1">'a'</span><span class=3D"p">,</span> <span cla=
ss=3D"s1">'b'</span><span class=3D"p">,</span> <span class=3D"n">np</span><=
span class=3D"o">.</span><span class=3D"n">nan</span><span class=3D"p">,</s=
pan> <span class=3D"s1">'d'</span><span class=3D"p">]}</span>

<span class=3D"gp">In [106]: </span><span class=3D"n">df</span> <span class=
=3D"o">=3D</span> <span class=3D"n">pd</span><span class=3D"o">.</span><spa=
n class=3D"n">DataFrame</span><span class=3D"p">(</span><span class=3D"n">d=
</span><span class=3D"p">)</span>

<span class=3D"gp">In [107]: </span><span class=3D"n">df</span><span class=
=3D"o">.</span><span class=3D"n">replace</span><span class=3D"p">(</span><s=
pan class=3D"s1">'.'</span><span class=3D"p">,</span> <span class=3D"n">np<=
/span><span class=3D"o">.</span><span class=3D"n">nan</span><span class=3D"=
p">)</span>
<span class=3D"gh">Out[107]: </span><span class=3D"go"></span>
<span class=3D"go">   a    b    c</span>
<span class=3D"go">0  0    a    a</span>
<span class=3D"go">1  1    b    b</span>
<span class=3D"go">2  2  NaN  NaN</span>
<span class=3D"go">3  3  NaN    d</span>
</pre></div>
</div>
<p>Now do it with a regular expression that removes surrounding whitespace
(regex -&gt; regex):</p>
<div class=3D"highlight-ipython notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">In [108]: </span><span class=3D"n">df</span=
><span class=3D"o">.</span><span class=3D"n">replace</span><span class=3D"p=
">(</span><span class=3D"sa">r</span><span class=3D"s1">'\s*\.\s*'</span><s=
pan class=3D"p">,</span> <span class=3D"n">np</span><span class=3D"o">.</sp=
an><span class=3D"n">nan</span><span class=3D"p">,</span> <span class=3D"n"=
>regex</span><span class=3D"o">=3D</span><span class=3D"bp">True</span><spa=
n class=3D"p">)</span>
<span class=3D"gh">Out[108]: </span><span class=3D"go"></span>
<span class=3D"go">   a    b    c</span>
<span class=3D"go">0  0    a    a</span>
<span class=3D"go">1  1    b    b</span>
<span class=3D"go">2  2  NaN  NaN</span>
<span class=3D"go">3  3  NaN    d</span>
</pre></div>
</div>
<p>Replace a few different values (list -&gt; list):</p>
<div class=3D"highlight-ipython notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">In [109]: </span><span class=3D"n">df</span=
><span class=3D"o">.</span><span class=3D"n">replace</span><span class=3D"p=
">([</span><span class=3D"s1">'a'</span><span class=3D"p">,</span> <span cl=
ass=3D"s1">'.'</span><span class=3D"p">],</span> <span class=3D"p">[</span>=
<span class=3D"s1">'b'</span><span class=3D"p">,</span> <span class=3D"n">n=
p</span><span class=3D"o">.</span><span class=3D"n">nan</span><span class=
=3D"p">])</span>
<span class=3D"gh">Out[109]: </span><span class=3D"go"></span>
<span class=3D"go">   a    b    c</span>
<span class=3D"go">0  0    b    b</span>
<span class=3D"go">1  1    b    b</span>
<span class=3D"go">2  2  NaN  NaN</span>
<span class=3D"go">3  3  NaN    d</span>
</pre></div>
</div>
<p>list of regex -&gt; list of regex:</p>
<div class=3D"highlight-ipython notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">In [110]: </span><span class=3D"n">df</span=
><span class=3D"o">.</span><span class=3D"n">replace</span><span class=3D"p=
">([</span><span class=3D"sa">r</span><span class=3D"s1">'\.'</span><span c=
lass=3D"p">,</span> <span class=3D"sa">r</span><span class=3D"s1">'(a)'</sp=
an><span class=3D"p">],</span> <span class=3D"p">[</span><span class=3D"s1"=
>'dot'</span><span class=3D"p">,</span> <span class=3D"s1">'</span><span cl=
ass=3D"se">\1</span><span class=3D"s1">stuff'</span><span class=3D"p">],</s=
pan> <span class=3D"n">regex</span><span class=3D"o">=3D</span><span class=
=3D"bp">True</span><span class=3D"p">)</span>
<span class=3D"gh">Out[110]: </span><span class=3D"go"></span>
<span class=3D"go">   a       b       c</span>
<span class=3D"go">0  0  =01stuff  =01stuff</span>
<span class=3D"go">1  1       b       b</span>
<span class=3D"go">2  2     dot     NaN</span>
<span class=3D"go">3  3     dot       d</span>
</pre></div>
</div>
<p>Only search in column <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">'b'</span></code> (dict -&gt; dict):</p>
<div class=3D"highlight-ipython notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">In [111]: </span><span class=3D"n">df</span=
><span class=3D"o">.</span><span class=3D"n">replace</span><span class=3D"p=
">({</span><span class=3D"s1">'b'</span><span class=3D"p">:</span> <span cl=
ass=3D"s1">'.'</span><span class=3D"p">},</span> <span class=3D"p">{</span>=
<span class=3D"s1">'b'</span><span class=3D"p">:</span> <span class=3D"n">n=
p</span><span class=3D"o">.</span><span class=3D"n">nan</span><span class=
=3D"p">})</span>
<span class=3D"gh">Out[111]: </span><span class=3D"go"></span>
<span class=3D"go">   a    b    c</span>
<span class=3D"go">0  0    a    a</span>
<span class=3D"go">1  1    b    b</span>
<span class=3D"go">2  2  NaN  NaN</span>
<span class=3D"go">3  3  NaN    d</span>
</pre></div>
</div>
<p>Same as the previous example, but use a regular expression for
searching instead (dict of regex -&gt; dict):</p>
<div class=3D"highlight-ipython notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">In [112]: </span><span class=3D"n">df</span=
><span class=3D"o">.</span><span class=3D"n">replace</span><span class=3D"p=
">({</span><span class=3D"s1">'b'</span><span class=3D"p">:</span> <span cl=
ass=3D"sa">r</span><span class=3D"s1">'\s*\.\s*'</span><span class=3D"p">},=
</span> <span class=3D"p">{</span><span class=3D"s1">'b'</span><span class=
=3D"p">:</span> <span class=3D"n">np</span><span class=3D"o">.</span><span =
class=3D"n">nan</span><span class=3D"p">},</span> <span class=3D"n">regex</=
span><span class=3D"o">=3D</span><span class=3D"bp">True</span><span class=
=3D"p">)</span>
<span class=3D"gh">Out[112]: </span><span class=3D"go"></span>
<span class=3D"go">   a    b    c</span>
<span class=3D"go">0  0    a    a</span>
<span class=3D"go">1  1    b    b</span>
<span class=3D"go">2  2  NaN  NaN</span>
<span class=3D"go">3  3  NaN    d</span>
</pre></div>
</div>
<p>You can pass nested dictionaries of regular expressions that use <code c=
lass=3D"docutils literal notranslate"><span class=3D"pre">regex=3DTrue</spa=
n></code>:</p>
<div class=3D"highlight-ipython notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">In [113]: </span><span class=3D"n">df</span=
><span class=3D"o">.</span><span class=3D"n">replace</span><span class=3D"p=
">({</span><span class=3D"s1">'b'</span><span class=3D"p">:</span> <span cl=
ass=3D"p">{</span><span class=3D"s1">'b'</span><span class=3D"p">:</span> <=
span class=3D"sa">r</span><span class=3D"s1">''</span><span class=3D"p">}},=
</span> <span class=3D"n">regex</span><span class=3D"o">=3D</span><span cla=
ss=3D"bp">True</span><span class=3D"p">)</span>
<span class=3D"gh">Out[113]: </span><span class=3D"go"></span>
<span class=3D"go">   a  b    c</span>
<span class=3D"go">0  0  a    a</span>
<span class=3D"go">1  1       b</span>
<span class=3D"go">2  2  .  NaN</span>
<span class=3D"go">3  3  .    d</span>
</pre></div>
</div>
<p>Alternatively, you can pass the nested dictionary like so:</p>
<div class=3D"highlight-ipython notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">In [114]: </span><span class=3D"n">df</span=
><span class=3D"o">.</span><span class=3D"n">replace</span><span class=3D"p=
">(</span><span class=3D"n">regex</span><span class=3D"o">=3D</span><span c=
lass=3D"p">{</span><span class=3D"s1">'b'</span><span class=3D"p">:</span> =
<span class=3D"p">{</span><span class=3D"sa">r</span><span class=3D"s1">'\s=
*\.\s*'</span><span class=3D"p">:</span> <span class=3D"n">np</span><span c=
lass=3D"o">.</span><span class=3D"n">nan</span><span class=3D"p">}})</span>
<span class=3D"gh">Out[114]: </span><span class=3D"go"></span>
<span class=3D"go">   a    b    c</span>
<span class=3D"go">0  0    a    a</span>
<span class=3D"go">1  1    b    b</span>
<span class=3D"go">2  2  NaN  NaN</span>
<span class=3D"go">3  3  NaN    d</span>
</pre></div>
</div>
<p>You can also use the group of a regular expression match when replacing =
(dict
of regex -&gt; dict of regex), this works for lists as well.</p>
<div class=3D"highlight-ipython notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">In [115]: </span><span class=3D"n">df</span=
><span class=3D"o">.</span><span class=3D"n">replace</span><span class=3D"p=
">({</span><span class=3D"s1">'b'</span><span class=3D"p">:</span> <span cl=
ass=3D"sa">r</span><span class=3D"s1">'\s*(\.)\s*'</span><span class=3D"p">=
},</span> <span class=3D"p">{</span><span class=3D"s1">'b'</span><span clas=
s=3D"p">:</span> <span class=3D"sa">r</span><span class=3D"s1">'\1ty'</span=
><span class=3D"p">},</span> <span class=3D"n">regex</span><span class=3D"o=
">=3D</span><span class=3D"bp">True</span><span class=3D"p">)</span>
<span class=3D"gh">Out[115]: </span><span class=3D"go"></span>
<span class=3D"go">   a    b    c</span>
<span class=3D"go">0  0    a    a</span>
<span class=3D"go">1  1    b    b</span>
<span class=3D"go">2  2  .ty  NaN</span>
<span class=3D"go">3  3  .ty    d</span>
</pre></div>
</div>
<p>You can pass a list of regular expressions, of which those that match
will be replaced with a scalar (list of regex -&gt; regex).</p>
<div class=3D"highlight-ipython notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">In [116]: </span><span class=3D"n">df</span=
><span class=3D"o">.</span><span class=3D"n">replace</span><span class=3D"p=
">([</span><span class=3D"sa">r</span><span class=3D"s1">'\s*\.\s*'</span><=
span class=3D"p">,</span> <span class=3D"sa">r</span><span class=3D"s1">'a|=
b'</span><span class=3D"p">],</span> <span class=3D"n">np</span><span class=
=3D"o">.</span><span class=3D"n">nan</span><span class=3D"p">,</span> <span=
 class=3D"n">regex</span><span class=3D"o">=3D</span><span class=3D"bp">Tru=
e</span><span class=3D"p">)</span>
<span class=3D"gh">Out[116]: </span><span class=3D"go"></span>
<span class=3D"go">   a   b    c</span>
<span class=3D"go">0  0 NaN  NaN</span>
<span class=3D"go">1  1 NaN  NaN</span>
<span class=3D"go">2  2 NaN  NaN</span>
<span class=3D"go">3  3 NaN    d</span>
</pre></div>
</div>
<p>All of the regular expression examples can also be passed with the
<code class=3D"docutils literal notranslate"><span class=3D"pre">to_replace=
</span></code> argument as the <code class=3D"docutils literal notranslate"=
><span class=3D"pre">regex</span></code> argument. In this case the <code c=
lass=3D"docutils literal notranslate"><span class=3D"pre">value</span></cod=
e>
argument must be passed explicitly by name or <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">regex</span></code> must be a nested
dictionary. The previous example, in this case, would then be:</p>
<div class=3D"highlight-ipython notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">In [117]: </span><span class=3D"n">df</span=
><span class=3D"o">.</span><span class=3D"n">replace</span><span class=3D"p=
">(</span><span class=3D"n">regex</span><span class=3D"o">=3D</span><span c=
lass=3D"p">[</span><span class=3D"sa">r</span><span class=3D"s1">'\s*\.\s*'=
</span><span class=3D"p">,</span> <span class=3D"sa">r</span><span class=3D=
"s1">'a|b'</span><span class=3D"p">],</span> <span class=3D"n">value</span>=
<span class=3D"o">=3D</span><span class=3D"n">np</span><span class=3D"o">.<=
/span><span class=3D"n">nan</span><span class=3D"p">)</span>
<span class=3D"gh">Out[117]: </span><span class=3D"go"></span>
<span class=3D"go">   a   b    c</span>
<span class=3D"go">0  0 NaN  NaN</span>
<span class=3D"go">1  1 NaN  NaN</span>
<span class=3D"go">2  2 NaN  NaN</span>
<span class=3D"go">3  3 NaN    d</span>
</pre></div>
</div>
<p>This can be convenient if you do not want to pass <code class=3D"docutil=
s literal notranslate"><span class=3D"pre">regex=3DTrue</span></code> every=
 time you
want to use a regular expression.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Anywhere in the above <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">replace</span></code> examples that you see a=
 regular expression
a compiled regular expression is valid as well.</p>
</div>
</div>
<div class=3D"section" id=3D"numeric-replacement">
<h3>Numeric Replacement<a class=3D"headerlink" href=3D"https://pandas.pydat=
a.org/pandas-docs/stable/missing_data.html#numeric-replacement" title=3D"Pe=
rmalink to this headline">=C2=B6</a></h3>
<p><a class=3D"reference internal" href=3D"https://pandas.pydata.org/pandas=
-docs/stable/generated/pandas.DataFrame.replace.html#pandas.DataFrame.repla=
ce" title=3D"pandas.DataFrame.replace"><code class=3D"xref py py-meth docut=
ils literal notranslate"><span class=3D"pre">replace()</span></code></a> is=
 similar to <a class=3D"reference internal" href=3D"https://pandas.pydata.o=
rg/pandas-docs/stable/generated/pandas.DataFrame.fillna.html#pandas.DataFra=
me.fillna" title=3D"pandas.DataFrame.fillna"><code class=3D"xref py py-meth=
 docutils literal notranslate"><span class=3D"pre">fillna()</span></code></=
a>.</p>
<div class=3D"highlight-ipython notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">In [118]: </span><span class=3D"n">df</span=
> <span class=3D"o">=3D</span> <span class=3D"n">pd</span><span class=3D"o"=
>.</span><span class=3D"n">DataFrame</span><span class=3D"p">(</span><span =
class=3D"n">np</span><span class=3D"o">.</span><span class=3D"n">random</sp=
an><span class=3D"o">.</span><span class=3D"n">randn</span><span class=3D"p=
">(</span><span class=3D"mi">10</span><span class=3D"p">,</span> <span clas=
s=3D"mi">2</span><span class=3D"p">))</span>

<span class=3D"gp">In [119]: </span><span class=3D"n">df</span><span class=
=3D"p">[</span><span class=3D"n">np</span><span class=3D"o">.</span><span c=
lass=3D"n">random</span><span class=3D"o">.</span><span class=3D"n">rand</s=
pan><span class=3D"p">(</span><span class=3D"n">df</span><span class=3D"o">=
.</span><span class=3D"n">shape</span><span class=3D"p">[</span><span class=
=3D"mi">0</span><span class=3D"p">])</span> <span class=3D"o">&gt;</span> <=
span class=3D"mf">0.5</span><span class=3D"p">]</span> <span class=3D"o">=
=3D</span> <span class=3D"mf">1.5</span>

<span class=3D"gp">In [120]: </span><span class=3D"n">df</span><span class=
=3D"o">.</span><span class=3D"n">replace</span><span class=3D"p">(</span><s=
pan class=3D"mf">1.5</span><span class=3D"p">,</span> <span class=3D"n">np<=
/span><span class=3D"o">.</span><span class=3D"n">nan</span><span class=3D"=
p">)</span>
<span class=3D"gh">Out[120]: </span><span class=3D"go"></span>
<span class=3D"go">          0         1</span>
<span class=3D"go">0 -0.844214 -1.021415</span>
<span class=3D"go">1  0.432396 -0.323580</span>
<span class=3D"go">2  0.423825  0.799180</span>
<span class=3D"go">3  1.262614  0.751965</span>
<span class=3D"go">4       NaN       NaN</span>
<span class=3D"go">5       NaN       NaN</span>
<span class=3D"go">6 -0.498174 -1.060799</span>
<span class=3D"go">7  0.591667 -0.183257</span>
<span class=3D"go">8  1.019855 -1.482465</span>
<span class=3D"go">9       NaN       NaN</span>
</pre></div>
</div>
<p>Replacing more than one value is possible by passing a list.</p>
<div class=3D"highlight-ipython notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">In [121]: </span><span class=3D"n">df00</sp=
an> <span class=3D"o">=3D</span> <span class=3D"n">df</span><span class=3D"=
o">.</span><span class=3D"n">values</span><span class=3D"p">[</span><span c=
lass=3D"mi">0</span><span class=3D"p">,</span> <span class=3D"mi">0</span><=
span class=3D"p">]</span>

<span class=3D"gp">In [122]: </span><span class=3D"n">df</span><span class=
=3D"o">.</span><span class=3D"n">replace</span><span class=3D"p">([</span><=
span class=3D"mf">1.5</span><span class=3D"p">,</span> <span class=3D"n">df=
00</span><span class=3D"p">],</span> <span class=3D"p">[</span><span class=
=3D"n">np</span><span class=3D"o">.</span><span class=3D"n">nan</span><span=
 class=3D"p">,</span> <span class=3D"s1">'a'</span><span class=3D"p">])</sp=
an>
<span class=3D"gh">Out[122]: </span><span class=3D"go"></span>
<span class=3D"go">          0         1</span>
<span class=3D"go">0         a  -1.02141</span>
<span class=3D"go">1  0.432396  -0.32358</span>
<span class=3D"go">2  0.423825   0.79918</span>
<span class=3D"go">3   1.26261  0.751965</span>
<span class=3D"go">4       NaN       NaN</span>
<span class=3D"go">5       NaN       NaN</span>
<span class=3D"go">6 -0.498174   -1.0608</span>
<span class=3D"go">7  0.591667 -0.183257</span>
<span class=3D"go">8   1.01985  -1.48247</span>
<span class=3D"go">9       NaN       NaN</span>

<span class=3D"gp">In [123]: </span><span class=3D"n">df</span><span class=
=3D"p">[</span><span class=3D"mi">1</span><span class=3D"p">]</span><span c=
lass=3D"o">.</span><span class=3D"n">dtype</span>
<span class=3D"go">Out[123]: dtype('float64')</span>
</pre></div>
</div>
<p>You can also operate on the DataFrame in place:</p>
<div class=3D"highlight-ipython notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">In [124]: </span><span class=3D"n">df</span=
><span class=3D"o">.</span><span class=3D"n">replace</span><span class=3D"p=
">(</span><span class=3D"mf">1.5</span><span class=3D"p">,</span> <span cla=
ss=3D"n">np</span><span class=3D"o">.</span><span class=3D"n">nan</span><sp=
an class=3D"p">,</span> <span class=3D"n">inplace</span><span class=3D"o">=
=3D</span><span class=3D"bp">True</span><span class=3D"p">)</span>
</pre></div>
</div>
<div class=3D"admonition warning">
<p class=3D"first admonition-title">Warning</p>
<p>When replacing multiple <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">bool</span></code> or <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">datetime64</span></code> objects, the first
argument to <code class=3D"docutils literal notranslate"><span class=3D"pre=
">replace</span></code> (<code class=3D"docutils literal notranslate"><span=
 class=3D"pre">to_replace</span></code>) must match the type of the value
being replaced. For example,</p>
<div class=3D"highlight-python notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"n">s</span> <span class=3D"o">=3D</span> <span c=
lass=3D"n">pd</span><span class=3D"o">.</span><span class=3D"n">Series</spa=
n><span class=3D"p">([</span><span class=3D"bp">True</span><span class=3D"p=
">,</span> <span class=3D"bp">False</span><span class=3D"p">,</span> <span =
class=3D"bp">True</span><span class=3D"p">])</span>
<span class=3D"n">s</span><span class=3D"o">.</span><span class=3D"n">repla=
ce</span><span class=3D"p">({</span><span class=3D"s1">'a string'</span><sp=
an class=3D"p">:</span> <span class=3D"s1">'new value'</span><span class=3D=
"p">,</span> <span class=3D"bp">True</span><span class=3D"p">:</span> <span=
 class=3D"bp">False</span><span class=3D"p">})</span>  <span class=3D"c1">#=
 raises</span>

<span class=3D"ne">TypeError</span><span class=3D"p">:</span> <span class=
=3D"n">Cannot</span> <span class=3D"n">compare</span> <span class=3D"n">typ=
es</span> <span class=3D"s1">'ndarray(dtype=3Dbool)'</span> <span class=3D"=
ow">and</span> <span class=3D"s1">'str'</span>
</pre></div>
</div>
<p>will raise a <code class=3D"docutils literal notranslate"><span class=3D=
"pre">TypeError</span></code> because one of the <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">dict</span></code> keys is not of th=
e
correct type for replacement.</p>
<p>However, when replacing a <em>single</em> object such as,</p>
<div class=3D"highlight-ipython notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">In [125]: </span><span class=3D"n">s</span>=
 <span class=3D"o">=3D</span> <span class=3D"n">pd</span><span class=3D"o">=
.</span><span class=3D"n">Series</span><span class=3D"p">([</span><span cla=
ss=3D"bp">True</span><span class=3D"p">,</span> <span class=3D"bp">False</s=
pan><span class=3D"p">,</span> <span class=3D"bp">True</span><span class=3D=
"p">])</span>

<span class=3D"gp">In [126]: </span><span class=3D"n">s</span><span class=
=3D"o">.</span><span class=3D"n">replace</span><span class=3D"p">(</span><s=
pan class=3D"s1">'a string'</span><span class=3D"p">,</span> <span class=3D=
"s1">'another string'</span><span class=3D"p">)</span>
<span class=3D"gh">Out[126]: </span><span class=3D"go"></span>
<span class=3D"go">0     True</span>
<span class=3D"go">1    False</span>
<span class=3D"go">2     True</span>
<span class=3D"go">dtype: bool</span>
</pre></div>
</div>
<p class=3D"last">the original <code class=3D"docutils literal notranslate"=
><span class=3D"pre">NDFrame</span></code> object will be returned untouche=
d. We=E2=80=99re working on
unifying this API, but for backwards compatibility reasons we cannot break
the latter behavior. See <a class=3D"reference external" href=3D"https://gi=
thub.com/pandas-dev/pandas/issues/6354">GH6354</a> for more details.</p>
</div>
</div>
</div>
<div class=3D"section" id=3D"missing-data-casting-rules-and-indexing">
<h2>Missing data casting rules and indexing<a class=3D"headerlink" href=3D"=
https://pandas.pydata.org/pandas-docs/stable/missing_data.html#missing-data=
-casting-rules-and-indexing" title=3D"Permalink to this headline">=C2=B6</a=
></h2>
<p>While pandas supports storing arrays of integer and boolean type, these =
types
are not capable of storing missing data. Until we can switch to using a nat=
ive
NA type in NumPy, we=E2=80=99ve established some =E2=80=9Ccasting rules=E2=
=80=9D. When a reindexing
operation introduces missing data, the Series will be cast according to the
rules introduced in the table below.</p>
<table border=3D"1" class=3D"colwidths-given docutils">
<colgroup>
<col width=3D"50%">
<col width=3D"50%">
</colgroup>
<thead valign=3D"bottom">
<tr class=3D"row-odd"><th class=3D"head">data type</th>
<th class=3D"head">Cast to</th>
</tr>
</thead>
<tbody valign=3D"top">
<tr class=3D"row-even"><td>integer</td>
<td>float</td>
</tr>
<tr class=3D"row-odd"><td>boolean</td>
<td>object</td>
</tr>
<tr class=3D"row-even"><td>float</td>
<td>no cast</td>
</tr>
<tr class=3D"row-odd"><td>object</td>
<td>no cast</td>
</tr>
</tbody>
</table>
<p>For example:</p>
<div class=3D"highlight-ipython notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">In [127]: </span><span class=3D"n">s</span>=
 <span class=3D"o">=3D</span> <span class=3D"n">pd</span><span class=3D"o">=
.</span><span class=3D"n">Series</span><span class=3D"p">(</span><span clas=
s=3D"n">np</span><span class=3D"o">.</span><span class=3D"n">random</span><=
span class=3D"o">.</span><span class=3D"n">randn</span><span class=3D"p">(<=
/span><span class=3D"mi">5</span><span class=3D"p">),</span> <span class=3D=
"n">index</span><span class=3D"o">=3D</span><span class=3D"p">[</span><span=
 class=3D"mi">0</span><span class=3D"p">,</span> <span class=3D"mi">2</span=
><span class=3D"p">,</span> <span class=3D"mi">4</span><span class=3D"p">,<=
/span> <span class=3D"mi">6</span><span class=3D"p">,</span> <span class=3D=
"mi">7</span><span class=3D"p">])</span>

<span class=3D"gp">In [128]: </span><span class=3D"n">s</span> <span class=
=3D"o">&gt;</span> <span class=3D"mi">0</span>
<span class=3D"gh">Out[128]: </span><span class=3D"go"></span>
<span class=3D"go">0    True</span>
<span class=3D"go">2    True</span>
<span class=3D"go">4    True</span>
<span class=3D"go">6    True</span>
<span class=3D"go">7    True</span>
<span class=3D"go">dtype: bool</span>

<span class=3D"gp">In [129]: </span><span class=3D"p">(</span><span class=
=3D"n">s</span> <span class=3D"o">&gt;</span> <span class=3D"mi">0</span><s=
pan class=3D"p">)</span><span class=3D"o">.</span><span class=3D"n">dtype</=
span>
<span class=3D"go">Out[129]: dtype('bool')</span>

<span class=3D"gp">In [130]: </span><span class=3D"n">crit</span> <span cla=
ss=3D"o">=3D</span> <span class=3D"p">(</span><span class=3D"n">s</span> <s=
pan class=3D"o">&gt;</span> <span class=3D"mi">0</span><span class=3D"p">)<=
/span><span class=3D"o">.</span><span class=3D"n">reindex</span><span class=
=3D"p">(</span><span class=3D"nb">list</span><span class=3D"p">(</span><spa=
n class=3D"nb">range</span><span class=3D"p">(</span><span class=3D"mi">8</=
span><span class=3D"p">)))</span>

<span class=3D"gp">In [131]: </span><span class=3D"n">crit</span>
<span class=3D"gh">Out[131]: </span><span class=3D"go"></span>
<span class=3D"go">0    True</span>
<span class=3D"go">1     NaN</span>
<span class=3D"go">2    True</span>
<span class=3D"go">3     NaN</span>
<span class=3D"go">4    True</span>
<span class=3D"go">5     NaN</span>
<span class=3D"go">6    True</span>
<span class=3D"go">7    True</span>
<span class=3D"go">dtype: object</span>

<span class=3D"gp">In [132]: </span><span class=3D"n">crit</span><span clas=
s=3D"o">.</span><span class=3D"n">dtype</span>
<span class=3D"go">Out[132]: dtype('O')</span>
</pre></div>
</div>
<p>Ordinarily NumPy will complain if you try to use an object array (even i=
f it
contains boolean values) instead of a boolean array to get or set values fr=
om
an ndarray (e.g. selecting values based on some criteria). If a boolean vec=
tor
contains NAs, an exception will be generated:</p>
<div class=3D"highlight-ipython notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">In [133]: </span><span class=3D"n">reindexe=
d</span> <span class=3D"o">=3D</span> <span class=3D"n">s</span><span class=
=3D"o">.</span><span class=3D"n">reindex</span><span class=3D"p">(</span><s=
pan class=3D"nb">list</span><span class=3D"p">(</span><span class=3D"nb">ra=
nge</span><span class=3D"p">(</span><span class=3D"mi">8</span><span class=
=3D"p">)))</span><span class=3D"o">.</span><span class=3D"n">fillna</span><=
span class=3D"p">(</span><span class=3D"mi">0</span><span class=3D"p">)</sp=
an>

<span class=3D"gp">In [134]: </span><span class=3D"n">reindexed</span><span=
 class=3D"p">[</span><span class=3D"n">crit</span><span class=3D"p">]</span=
>
<span class=3D"gt">--------------------------------------------------------=
-------------------</span>
<span class=3D"ne">ValueError</span><span class=3D"g g-Whitespace">        =
                        </span>Traceback (most recent call last)
<span class=3D"nn">&lt;ipython-input-134-0dac417a4890&gt;</span> in <span c=
lass=3D"ni">&lt;module&gt;</span><span class=3D"nt">()</span>
<span class=3D"ne">----&gt; </span><span class=3D"mi">1</span> <span class=
=3D"n">reindexed</span><span class=3D"p">[</span><span class=3D"n">crit</sp=
an><span class=3D"p">]</span>

<span class=3D"nn">/pandas/pandas/core/series.py</span> in <span class=3D"n=
i">__getitem__</span><span class=3D"nt">(self, key)</span>
<span class=3D"g g-Whitespace">    </span><span class=3D"mi">805</span>    =
         <span class=3D"n">key</span> <span class=3D"o">=3D</span> <span cl=
ass=3D"nb">list</span><span class=3D"p">(</span><span class=3D"n">key</span=
><span class=3D"p">)</span>
<span class=3D"g g-Whitespace">    </span><span class=3D"mi">806</span>=20
<span class=3D"ne">--&gt; </span><span class=3D"mi">807</span>         <spa=
n class=3D"k">if</span> <span class=3D"n">com</span><span class=3D"o">.</sp=
an><span class=3D"n">is_bool_indexer</span><span class=3D"p">(</span><span =
class=3D"n">key</span><span class=3D"p">):</span>
<span class=3D"g g-Whitespace">    </span><span class=3D"mi">808</span>    =
         <span class=3D"n">key</span> <span class=3D"o">=3D</span> <span cl=
ass=3D"n">check_bool_indexer</span><span class=3D"p">(</span><span class=3D=
"bp">self</span><span class=3D"o">.</span><span class=3D"n">index</span><sp=
an class=3D"p">,</span> <span class=3D"n">key</span><span class=3D"p">)</sp=
an>
<span class=3D"g g-Whitespace">    </span><span class=3D"mi">809</span>=20

<span class=3D"nn">/pandas/pandas/core/common.py</span> in <span class=3D"n=
i">is_bool_indexer</span><span class=3D"nt">(key)</span>
<span class=3D"g g-Whitespace">    </span><span class=3D"mi">105</span>    =
         <span class=3D"k">if</span> <span class=3D"ow">not</span> <span cl=
ass=3D"n">lib</span><span class=3D"o">.</span><span class=3D"n">is_bool_arr=
ay</span><span class=3D"p">(</span><span class=3D"n">key</span><span class=
=3D"p">):</span>
<span class=3D"g g-Whitespace">    </span><span class=3D"mi">106</span>    =
             <span class=3D"k">if</span> <span class=3D"n">isna</span><span=
 class=3D"p">(</span><span class=3D"n">key</span><span class=3D"p">)</span>=
<span class=3D"o">.</span><span class=3D"n">any</span><span class=3D"p">():=
</span>
<span class=3D"ne">--&gt; </span><span class=3D"mi">107</span>             =
        <span class=3D"k">raise</span> <span class=3D"ne">ValueError</span>=
<span class=3D"p">(</span><span class=3D"s1">'cannot index with vector cont=
aining '</span>
<span class=3D"g g-Whitespace">    </span><span class=3D"mi">108</span>    =
                                  <span class=3D"s1">'NA / NaN values'</spa=
n><span class=3D"p">)</span>
<span class=3D"g g-Whitespace">    </span><span class=3D"mi">109</span>    =
             <span class=3D"k">return</span> <span class=3D"bp">False</span=
>

<span class=3D"ne">ValueError</span>: cannot index with vector containing N=
A / NaN values
</pre></div>
</div>
<p>However, these can be filled in using <a class=3D"reference internal" hr=
ef=3D"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFra=
me.fillna.html#pandas.DataFrame.fillna" title=3D"pandas.DataFrame.fillna"><=
code class=3D"xref py py-meth docutils literal notranslate"><span class=3D"=
pre">fillna()</span></code></a> and it will work fine:</p>
<div class=3D"highlight-ipython notranslate"><div class=3D"highlight"><pre>=
<span></span><span class=3D"gp">In [135]: </span><span class=3D"n">reindexe=
d</span><span class=3D"p">[</span><span class=3D"n">crit</span><span class=
=3D"o">.</span><span class=3D"n">fillna</span><span class=3D"p">(</span><sp=
an class=3D"bp">False</span><span class=3D"p">)]</span>
<span class=3D"gh">Out[135]: </span><span class=3D"go"></span>
<span class=3D"go">0    0.126504</span>
<span class=3D"go">2    0.696198</span>
<span class=3D"go">4    0.697416</span>
<span class=3D"go">6    0.601516</span>
<span class=3D"go">7    0.003659</span>
<span class=3D"go">dtype: float64</span>

<span class=3D"gp">In [136]: </span><span class=3D"n">reindexed</span><span=
 class=3D"p">[</span><span class=3D"n">crit</span><span class=3D"o">.</span=
><span class=3D"n">fillna</span><span class=3D"p">(</span><span class=3D"bp=
">True</span><span class=3D"p">)]</span>
<span class=3D"go">Out[136]: </span>
<span class=3D"go">0    0.126504</span>
<span class=3D"go">1    0.000000</span>
<span class=3D"go">2    0.696198</span>
<span class=3D"go">3    0.000000</span>
<span class=3D"go">4    0.697416</span>
<span class=3D"go">5    0.000000</span>
<span class=3D"go">6    0.601516</span>
<span class=3D"go">7    0.003659</span>
<span class=3D"go">dtype: float64</span>
</pre></div>
</div>
</div>
</div>


                    </div>
                </div>
            </div>

           =20
            <div class=3D"clearer"></div>
        </div>
    </div>
</div>
    <div class=3D"related" role=3D"navigation" aria-label=3D"related naviga=
tion">
      <h3>Navigation</h3>
      <ul>
        <li class=3D"right" style=3D"margin-right: 10px">
          <a href=3D"https://pandas.pydata.org/pandas-docs/stable/genindex.=
html" title=3D"General Index">index</a></li>
        <li class=3D"right">
          <a href=3D"https://pandas.pydata.org/pandas-docs/stable/py-modind=
ex.html" title=3D"Python Module Index">modules</a> |</li>
        <li class=3D"right">
          <a href=3D"https://pandas.pydata.org/pandas-docs/stable/groupby.h=
tml" title=3D"Group By: split-apply-combine">next</a> |</li>
        <li class=3D"right">
          <a href=3D"https://pandas.pydata.org/pandas-docs/stable/computati=
on.html" title=3D"Computational tools">previous</a> |</li>
        <li class=3D"nav-item nav-item-0"><a href=3D"https://pandas.pydata.=
org/pandas-docs/stable/index.html">pandas 0.23.4 documentation</a> =C2=BB</=
li>=20
      </ul>
    </div>
<style type=3D"text/css">
    .scrollToTop {
        text-align: center;
        font-weight: bold;
        position: fixed;
        bottom: 60px;
        right: 40px;
        display: none;
    }
</style>
<a href=3D"https://pandas.pydata.org/pandas-docs/stable/missing_data.html#"=
 class=3D"scrollToTop" style=3D"display: inline;">Scroll To Top</a>



 =20
</body></html>
------MultipartBoundary--VC2uzp7J5kSRAjTqs1aUWpOToD3r76QsQkbPabR4Dc----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://pandas.pydata.org/pandas-docs/stable/_static/nature.css

@charset "utf-8";

@import url("basic.css");

body { font-family: Arial, sans-serif; font-size: 100%; background-color: r=
gb(17, 17, 17); color: rgb(85, 85, 85); margin: 0px; padding: 0px; }

div.documentwrapper { width: 100%; }

div.bodywrapper { margin: 0px 0px 0px 270px; min-width: 540px; max-width: 8=
00px; }

hr { border: 1px solid rgb(177, 180, 182); }

div.document { background-color: rgb(238, 238, 238); }

div.body { background-color: rgb(255, 255, 255); color: rgb(62, 67, 73); pa=
dding: 0px 30px 30px; font-size: 0.9em; }

div.footer { color: rgb(85, 85, 85); width: 100%; padding: 13px 0px; text-a=
lign: center; font-size: 75%; }

div.footer a { color: rgb(68, 68, 68); text-decoration: underline; }

div.related { background-color: rgb(107, 168, 30); line-height: 32px; color=
: rgb(255, 255, 255); text-shadow: rgb(68, 68, 68) 0px 1px 0px; font-size: =
0.9em; }

div.related a { color: rgb(226, 243, 204); }

div.sphinxsidebar { font-size: 0.75em; line-height: 1.5em; width: 270px; ma=
rgin: 0px; float: left; background-color: rgb(238, 238, 238); }

div.sphinxsidebar h3, div.sphinxsidebar h4 { font-family: Arial, sans-serif=
; color: rgb(34, 34, 34); font-size: 1.2em; font-weight: normal; margin: 20=
px 0px 0px; padding: 5px 10px; background-color: rgb(221, 221, 221); text-s=
hadow: white 1px 1px 0px; }

div.sphinxsidebar h4 { font-size: 1.1em; }

div.sphinxsidebar h3 a { color: rgb(68, 68, 68); }

div.sphinxsidebar p { color: rgb(136, 136, 136); }

div.sphinxsidebar p.searchtip { color: rgb(136, 136, 136); padding: 5px 20p=
x; }

div.sphinxsidebar p.topless { }

div.sphinxsidebar ul { margin: 10px 20px; padding: 0px; color: rgb(0, 0, 0)=
; }

div.sphinxsidebar a { color: rgb(68, 68, 68); }

div.sphinxsidebar input { border: 1px solid rgb(204, 204, 204); font-family=
: sans-serif; font-size: 1em; }

div.sphinxsidebar input[type=3D"text"] { margin-left: 20px; }

a { color: rgb(0, 91, 129); text-decoration: none; }

a:hover { color: rgb(227, 46, 0); text-decoration: underline; }

div.body h1, div.body h2, div.body h3, div.body h4, div.body h5, div.body h=
6 { font-family: Arial, sans-serif; background-color: rgb(190, 212, 235); f=
ont-weight: normal; color: rgb(33, 34, 36); margin: 30px 0px 10px; padding:=
 5px 0px 5px 10px; text-shadow: white 0px 1px 0px; }

div.body h1 { border-top: 20px solid white; margin-top: 0px; font-size: 200=
%; }

div.body h2 { font-size: 150%; background-color: rgb(200, 213, 227); }

div.body h3 { font-size: 120%; background-color: rgb(216, 222, 227); }

div.body h4 { font-size: 110%; background-color: rgb(216, 222, 227); }

div.body h5 { font-size: 100%; background-color: rgb(216, 222, 227); }

div.body h6 { font-size: 100%; background-color: rgb(216, 222, 227); }

p.rubric { border-bottom: 1px solid rgb(201, 201, 201); }

a.headerlink { color: rgb(198, 15, 15); font-size: 0.8em; padding: 0px 4px;=
 text-decoration: none; }

a.headerlink:hover { background-color: rgb(198, 15, 15); color: white; }

div.body p, div.body dd, div.body li { line-height: 1.5em; }

div.admonition p.admonition-title + p, div.deprecated p { display: inline; =
}

div.deprecated { margin-bottom: 10px; margin-top: 10px; padding: 7px; backg=
round-color: rgb(255, 228, 228); border: 1px solid rgb(255, 102, 102); }

div.highlight { background-color: white; }

div.note { background-color: rgb(238, 238, 238); border: 1px solid rgb(204,=
 204, 204); }

div.seealso { background-color: rgb(255, 255, 204); border: 1px solid rgb(2=
55, 255, 102); }

div.topic { background-color: rgb(238, 238, 238); }

div.warning { background-color: rgb(255, 228, 228); border: 1px solid rgb(2=
55, 102, 102); }

p.admonition-title { display: inline; }

p.admonition-title::after { content: ":"; }

pre { padding: 10px; background-color: rgb(250, 250, 250); color: rgb(34, 3=
4, 34); line-height: 1.2em; border: 1px solid rgb(201, 201, 201); font-size=
: 1.1em; margin: 1.5em 0px; box-shadow: rgb(216, 216, 216) 1px 1px 1px; }

tt { background-color: rgb(236, 240, 243); color: rgb(34, 34, 34); font-siz=
e: 1.1em; font-family: monospace; }

.viewcode-back { font-family: Arial, sans-serif; }

div.viewcode-block:target { background-color: rgb(244, 222, 191); border-to=
p: 1px solid rgb(170, 204, 153); border-bottom: 1px solid rgb(170, 204, 153=
); }

table.field-list { border-collapse: separate; border-spacing: 10px; margin-=
left: 1px; }

table.field-list th.field-name { padding: 1px 8px 1px 5px; white-space: now=
rap; background-color: rgb(238, 238, 238); }

table.field-list td.field-body > p { font-style: italic; }

table.field-list td.field-body > p > strong { font-style: normal; }

td.field-body blockquote { border-left: none; margin: 0em 0em 0.3em; paddin=
g-left: 30px; }

thead { vertical-align: bottom; }

tr, th, td { vertical-align: middle; padding: 0.5em; line-height: normal; w=
hite-space: normal; max-width: none; border: none; }

th { font-weight: bold; }

th.col_heading { text-align: right; }

tbody tr:nth-child(2n+1) { background: rgb(245, 245, 245); }

table td.data, table th.row_heading table th.col_heading { font-family: mon=
ospace; text-align: right; }

div.seealso dd { margin-top: 0px; margin-bottom: 0px; }
------MultipartBoundary--VC2uzp7J5kSRAjTqs1aUWpOToD3r76QsQkbPabR4Dc----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://pandas.pydata.org/pandas-docs/stable/_static/basic.css

@charset "utf-8";

div.clearer { clear: both; }

div.related { width: 100%; font-size: 90%; }

div.related h3 { display: none; }

div.related ul { margin: 0px; padding: 0px 0px 0px 10px; list-style: none; =
}

div.related li { display: inline; }

div.related li.right { float: right; margin-right: 5px; }

div.sphinxsidebarwrapper { padding: 10px 5px 0px 10px; }

div.sphinxsidebar { float: left; width: 270px; margin-left: -100%; font-siz=
e: 90%; overflow-wrap: break-word; }

div.sphinxsidebar ul { list-style: none; }

div.sphinxsidebar ul ul, div.sphinxsidebar ul.want-points { margin-left: 20=
px; list-style: square; }

div.sphinxsidebar ul ul { margin-top: 0px; margin-bottom: 0px; }

div.sphinxsidebar form { margin-top: 10px; }

div.sphinxsidebar input { border: 1px solid rgb(152, 219, 204); font-family=
: sans-serif; font-size: 1em; }

div.sphinxsidebar #searchbox input[type=3D"text"] { float: left; width: 80%=
; padding: 0.25em; box-sizing: border-box; }

div.sphinxsidebar #searchbox input[type=3D"submit"] { float: left; width: 2=
0%; border-left: none; padding: 0.25em; box-sizing: border-box; }

img { border: 0px; max-width: 100%; }

ul.search { margin: 10px 0px 0px 20px; padding: 0px; }

ul.search li { padding: 5px 0px 5px 20px; background-image: url("file.png")=
; background-repeat: no-repeat; background-position: 0px 7px; }

ul.search li a { font-weight: bold; }

ul.search li div.context { color: rgb(136, 136, 136); margin: 2px 0px 0px 3=
0px; text-align: left; }

ul.keywordmatches li.goodmatch a { font-weight: bold; }

table.contentstable { width: 90%; margin-left: auto; margin-right: auto; }

table.contentstable p.biglink { line-height: 150%; }

a.biglink { font-size: 1.3em; }

span.linkdescr { font-style: italic; padding-top: 5px; font-size: 90%; }

table.indextable { width: 100%; }

table.indextable td { text-align: left; vertical-align: top; }

table.indextable ul { margin-top: 0px; margin-bottom: 0px; list-style-type:=
 none; }

table.indextable > tbody > tr > td > ul { padding-left: 0em; }

table.indextable tr.pcap { height: 10px; }

table.indextable tr.cap { margin-top: 10px; background-color: rgb(242, 242,=
 242); }

img.toggler { margin-right: 3px; margin-top: 3px; cursor: pointer; }

div.modindex-jumpbox { border-top: 1px solid rgb(221, 221, 221); border-bot=
tom: 1px solid rgb(221, 221, 221); margin: 1em 0px; padding: 0.4em; }

div.genindex-jumpbox { border-top: 1px solid rgb(221, 221, 221); border-bot=
tom: 1px solid rgb(221, 221, 221); margin: 1em 0px; padding: 0.4em; }

table.modindextable td { padding: 2px; border-collapse: collapse; }

div.body { min-width: 450px; max-width: 800px; }

div.body p, div.body dd, div.body li, div.body blockquote { }

a.headerlink { visibility: hidden; }

h1:hover > a.headerlink, h2:hover > a.headerlink, h3:hover > a.headerlink, =
h4:hover > a.headerlink, h5:hover > a.headerlink, h6:hover > a.headerlink, =
dt:hover > a.headerlink, caption:hover > a.headerlink, p.caption:hover > a.=
headerlink, div.code-block-caption:hover > a.headerlink { visibility: visib=
le; }

div.body p.caption { text-align: inherit; }

div.body td { text-align: left; }

.first { margin-top: 0px !important; }

p.rubric { margin-top: 30px; font-weight: bold; }

img.align-left, .figure.align-left, object.align-left { clear: left; float:=
 left; margin-right: 1em; }

img.align-right, .figure.align-right, object.align-right { clear: right; fl=
oat: right; margin-left: 1em; }

img.align-center, .figure.align-center, object.align-center { display: bloc=
k; margin-left: auto; margin-right: auto; }

.align-left { text-align: left; }

.align-center { text-align: center; }

.align-right { text-align: right; }

div.sidebar { margin: 0px 0px 0.5em 1em; border: 1px solid rgb(221, 221, 18=
7); padding: 7px 7px 0px; background-color: rgb(255, 255, 238); width: 40%;=
 float: right; }

p.sidebar-title { font-weight: bold; }

div.topic { border: 1px solid rgb(204, 204, 204); padding: 7px 7px 0px; mar=
gin: 10px 0px; }

p.topic-title { font-size: 1.1em; font-weight: bold; margin-top: 10px; }

div.admonition { margin-top: 10px; margin-bottom: 10px; padding: 7px; }

div.admonition dt { font-weight: bold; }

div.admonition dl { margin-bottom: 0px; }

p.admonition-title { margin: 0px 10px 5px 0px; font-weight: bold; }

div.body p.centered { text-align: center; margin-top: 25px; }

table.docutils { border: 0px; border-collapse: collapse; }

table.align-center { margin-left: auto; margin-right: auto; }

table caption span.caption-number { font-style: italic; }

table caption span.caption-text { }

table.docutils td, table.docutils th { padding: 1px 8px 1px 5px; border-wid=
th: 0px 0px 1px; border-top-style: initial; border-top-color: initial; bord=
er-left-style: initial; border-left-color: initial; border-right-style: ini=
tial; border-right-color: initial; border-bottom-style: solid; border-botto=
m-color: rgb(170, 170, 170); }

table.footnote td, table.footnote th { border: 0px !important; }

th { text-align: left; padding-right: 5px; }

table.citation { border-left: 1px solid gray; margin-left: 1px; }

table.citation td { border-bottom: none; }

div.figure { margin: 0.5em; padding: 0.5em; }

div.figure p.caption { padding: 0.3em; }

div.figure p.caption span.caption-number { font-style: italic; }

div.figure p.caption span.caption-text { }

table.field-list td, table.field-list th { border: 0px !important; }

.field-list ul { margin: 0px; padding-left: 1em; }

.field-list p { margin: 0px; }

.field-name { hyphens: manual; }

ol.arabic { list-style: decimal; }

ol.loweralpha { list-style: lower-alpha; }

ol.upperalpha { list-style: upper-alpha; }

ol.lowerroman { list-style: lower-roman; }

ol.upperroman { list-style: upper-roman; }

dl { margin-bottom: 15px; }

dd p { margin-top: 0px; }

dd ul, dd table { margin-bottom: 10px; }

dd { margin-top: 3px; margin-bottom: 10px; margin-left: 30px; }

dt:target, span.highlighted { background-color: rgb(251, 229, 78); }

rect.highlighted { fill: rgb(251, 229, 78); }

dl.glossary dt { font-weight: bold; font-size: 1.1em; }

.optional { font-size: 1.3em; }

.sig-paren { font-size: larger; }

.versionmodified { font-style: italic; }

.system-message { background-color: rgb(255, 221, 170); padding: 5px; borde=
r: 3px solid red; }

.footnote:target { background-color: rgb(255, 255, 170); }

.line-block { display: block; margin-top: 1em; margin-bottom: 1em; }

.line-block .line-block { margin-top: 0px; margin-bottom: 0px; margin-left:=
 1.5em; }

.guilabel, .menuselection { font-family: sans-serif; }

.accelerator { text-decoration: underline; }

.classifier { font-style: oblique; }

abbr, acronym { border-bottom: 1px dotted; cursor: help; }

pre { overflow: auto hidden; }

span.pre { hyphens: none; }

td.linenos pre { padding: 5px 0px; border: 0px; background-color: transpare=
nt; color: rgb(170, 170, 170); }

table.highlighttable { margin-left: 0.5em; }

table.highlighttable td { padding: 0px 0.5em; }

div.code-block-caption { padding: 2px 5px; font-size: small; }

div.code-block-caption code { background-color: transparent; }

div.code-block-caption + div > div.highlight > pre { margin-top: 0px; }

div.code-block-caption span.caption-number { padding: 0.1em 0.3em; font-sty=
le: italic; }

div.code-block-caption span.caption-text { }

div.literal-block-wrapper { padding: 1em 1em 0px; }

div.literal-block-wrapper div.highlight { margin: 0px; }

code.descname { background-color: transparent; font-weight: bold; font-size=
: 1.2em; }

code.descclassname { background-color: transparent; }

code.xref, a code { background-color: transparent; font-weight: bold; }

h1 code, h2 code, h3 code, h4 code, h5 code, h6 code { background-color: tr=
ansparent; }

.viewcode-link { float: right; }

.viewcode-back { float: right; font-family: sans-serif; }

div.viewcode-block:target { margin: -1px -10px; padding: 0px 10px; }

img.math { vertical-align: middle; }

div.body div.math p { text-align: center; }

span.eqno { float: right; }

span.eqno a.headerlink { position: relative; left: 0px; z-index: 1; }

div.math:hover a.headerlink { visibility: visible; }

@media print {
  div.document, div.documentwrapper, div.bodywrapper { width: 100%; margin:=
 0px !important; }
  div.sphinxsidebar, div.related, div.footer, #top-link { display: none; }
}
------MultipartBoundary--VC2uzp7J5kSRAjTqs1aUWpOToD3r76QsQkbPabR4Dc----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://pandas.pydata.org/pandas-docs/stable/_static/pygments.css

@charset "utf-8";

.highlight .hll { background-color: rgb(255, 255, 204); }

.highlight { background: rgb(238, 255, 204); }

.highlight .c { color: rgb(64, 128, 144); font-style: italic; }

.highlight .err { border: 1px solid rgb(255, 0, 0); }

.highlight .k { color: rgb(0, 112, 32); font-weight: bold; }

.highlight .o { color: rgb(102, 102, 102); }

.highlight .ch { color: rgb(64, 128, 144); font-style: italic; }

.highlight .cm { color: rgb(64, 128, 144); font-style: italic; }

.highlight .cp { color: rgb(0, 112, 32); }

.highlight .cpf { color: rgb(64, 128, 144); font-style: italic; }

.highlight .c1 { color: rgb(64, 128, 144); font-style: italic; }

.highlight .cs { color: rgb(64, 128, 144); background-color: rgb(255, 240, =
240); }

.highlight .gd { color: rgb(160, 0, 0); }

.highlight .ge { font-style: italic; }

.highlight .gr { color: rgb(255, 0, 0); }

.highlight .gh { color: rgb(0, 0, 128); font-weight: bold; }

.highlight .gi { color: rgb(0, 160, 0); }

.highlight .go { color: rgb(51, 51, 51); }

.highlight .gp { color: rgb(198, 93, 9); font-weight: bold; }

.highlight .gs { font-weight: bold; }

.highlight .gu { color: rgb(128, 0, 128); font-weight: bold; }

.highlight .gt { color: rgb(0, 68, 221); }

.highlight .kc { color: rgb(0, 112, 32); font-weight: bold; }

.highlight .kd { color: rgb(0, 112, 32); font-weight: bold; }

.highlight .kn { color: rgb(0, 112, 32); font-weight: bold; }

.highlight .kp { color: rgb(0, 112, 32); }

.highlight .kr { color: rgb(0, 112, 32); font-weight: bold; }

.highlight .kt { color: rgb(144, 32, 0); }

.highlight .m { color: rgb(32, 128, 80); }

.highlight .s { color: rgb(64, 112, 160); }

.highlight .na { color: rgb(64, 112, 160); }

.highlight .nb { color: rgb(0, 112, 32); }

.highlight .nc { color: rgb(14, 132, 181); font-weight: bold; }

.highlight .no { color: rgb(96, 173, 213); }

.highlight .nd { color: rgb(85, 85, 85); font-weight: bold; }

.highlight .ni { color: rgb(213, 85, 55); font-weight: bold; }

.highlight .ne { color: rgb(0, 112, 32); }

.highlight .nf { color: rgb(6, 40, 126); }

.highlight .nl { color: rgb(0, 32, 112); font-weight: bold; }

.highlight .nn { color: rgb(14, 132, 181); font-weight: bold; }

.highlight .nt { color: rgb(6, 40, 115); font-weight: bold; }

.highlight .nv { color: rgb(187, 96, 213); }

.highlight .ow { color: rgb(0, 112, 32); font-weight: bold; }

.highlight .w { color: rgb(187, 187, 187); }

.highlight .mb { color: rgb(32, 128, 80); }

.highlight .mf { color: rgb(32, 128, 80); }

.highlight .mh { color: rgb(32, 128, 80); }

.highlight .mi { color: rgb(32, 128, 80); }

.highlight .mo { color: rgb(32, 128, 80); }

.highlight .sa { color: rgb(64, 112, 160); }

.highlight .sb { color: rgb(64, 112, 160); }

.highlight .sc { color: rgb(64, 112, 160); }

.highlight .dl { color: rgb(64, 112, 160); }

.highlight .sd { color: rgb(64, 112, 160); font-style: italic; }

.highlight .s2 { color: rgb(64, 112, 160); }

.highlight .se { color: rgb(64, 112, 160); font-weight: bold; }

.highlight .sh { color: rgb(64, 112, 160); }

.highlight .si { color: rgb(112, 160, 208); font-style: italic; }

.highlight .sx { color: rgb(198, 93, 9); }

.highlight .sr { color: rgb(35, 83, 136); }

.highlight .s1 { color: rgb(64, 112, 160); }

.highlight .ss { color: rgb(81, 121, 24); }

.highlight .bp { color: rgb(0, 112, 32); }

.highlight .fm { color: rgb(6, 40, 126); }

.highlight .vc { color: rgb(187, 96, 213); }

.highlight .vg { color: rgb(187, 96, 213); }

.highlight .vi { color: rgb(187, 96, 213); }

.highlight .vm { color: rgb(187, 96, 213); }

.highlight .il { color: rgb(32, 128, 80); }
------MultipartBoundary--VC2uzp7J5kSRAjTqs1aUWpOToD3r76QsQkbPabR4Dc----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://pandas.pydata.org/pandas-docs/stable/_images/series_interpolate.png

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
RU5ErkJggg==

------MultipartBoundary--VC2uzp7J5kSRAjTqs1aUWpOToD3r76QsQkbPabR4Dc----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://pandas.pydata.org/pandas-docs/stable/_images/compare_interpolations.png

iVBORw0KGgoAAAANSUhEUgAAAoAAAAHgCAYAAAA10dzkAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz
AAAPYQAAD2EBqD+naQAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMi4yLCBo
dHRwOi8vbWF0cGxvdGxpYi5vcmcvhp/UCwAAIABJREFUeJzs3XmcTfXjx/HXuXfu3NnHNmZMxvZF
FFJISiiMCClRyJK+bXZlTYTssoRSlK8tSYW0iXyjbIWSfSljizFkzDBjtnvP7w81v+9EGczMmbn3
/Xw87uNhzvmcc98Xue8+ZzNM0zQREREREa9hszqAiIiIiOQtFUARERERL6MCKCIiIuJlVABFRERE
vIwKoIiIiIiXUQEUERER8TIqgCIiIiJeRgVQRERExMuoAIqIiIh4GRVAERERES+jAigiIiLiZVQA
RURERLyMCqCIiIiIl1EBFBEREfEyKoAiIiIiXkYFUERERMTLqACKiIiIeBkVQBEREREvowIoIiIi
4mVUAEVERES8jAqgiIiIiJdRARQRERHxMiqAIiIiIl5GBVBERETEy6gAioiIiHgZFUARERERL6MC
KCIiIuJlVABFREREvIwKoIiIiIiXUQEUERER8TIqgCIiIiJeRgVQRERExMuoAIqIiIh4GRVAERER
ES+jAigiIiLiZVQARURERLyMCqCIiIiIl1EBFBEREfEyKoAiIiIiXkYFUERERMTLqACKiIiIeBkV
QBEREREvowIoIiIi4mVUAEVERES8jAqgiIiIiJdRARQRERHxMiqAIiIiIl5GBVBERETEy6gAioiI
iHgZFUARERERL6MCKCIiIuJlVABFREREvIwKoIiIiIiXUQEUERER8TIqgCIiIiJeRgVQRERExMv4
WB2gIHO73Zw4cYLg4GAMw7A6joiIiGSDaZqcP3+eyMhIbDbvnAtTAbwBJ06cICoqyuoYIiIich2O
HTtGyZIlrY5hCRXAGxAcHAxc+gsUEhJicRoRERHJjsTERKKiojK/x72RCuAN+POwb0hIiAqgiIhI
AePNp29554FvERERES+mAigiIiLiZVQARURERLyMzgHMZaZpkpGRgcvlsjqK3ACHw4Hdbrc6hoiI
SI5QAcxFaWlpnDx5kuTkZKujyA0yDIOSJUsSFBRkdRQREZEbpgKYS9xuNzExMdjtdiIjI/H19fXq
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
U+P1ek18fLy5+eabTWpqqtOxqsSqVasMcNJl+PDhxphjHwUzefJkExcXZ/x+v7nqqqvM1q1bnQ1d
Cc40d0FBgUlJSTGNGjUyXq/XNG/e3AwfPtzs37/f6dgX7FQzA2b+/Pnl1yksLDRjx441sbGxJiIi
wgwcONAVs+/fv99cddVVJjY21vh8PtOyZUtz3333mczMTGeDV4J77rmn/P/jjRo1Mv379zfLly8v
/3morvmZ5g7l9a6NLGOMqc7CKSIiIiLO0v5WEREREZdRARQRERFxGRVAEREREZdRARQRERFxGRVA
EREREZdRARQRERFxGRVAEREREZdRARQRERFxGRVAEREREZdRARQRERFxGRVAEREREZdRARQRERFx
GRVAEREREZdRARQRERFxGRVAEREREZdRARQRERFxGRVAEREREZdRARQRERFxGRVAEREREZdRARQR
ERFxGRVAEREREZdRARQRERFxGRVAEREREZdRARQRERFxGRVAEREREZdRARQRERFxGRVAEREREZdR
ARQRERFxGRVAEREREZdRARQRERFxGRVAEREREZf5X4q0wNCA8uIuAAAAAElFTkSuQmCC

------MultipartBoundary--VC2uzp7J5kSRAjTqs1aUWpOToD3r76QsQkbPabR4Dc------
